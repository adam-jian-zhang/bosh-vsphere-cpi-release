=begin
#NSX-T Manager API

#VMware NSX-T Manager REST API

OpenAPI spec version: 2.5.1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.25
=end

require 'date'

module NSXT
  class TraceflowObservationDroppedLogical
    # The ID of the NAT rule that was applied to forward the traceflow packet
    attr_accessor :nat_rule_id

    # The reason traceflow packet was dropped
    attr_accessor :reason

    # The id of the logical port at which the traceflow packet was dropped
    attr_accessor :lport_id

    # The name of the logical port at which the traceflow packet was dropped
    attr_accessor :lport_name

    # The id of the acl rule that was applied to drop the traceflow packet
    attr_accessor :acl_rule_id

    # This field specifies the ARP fails reason ARP_TIMEOUT - ARP failure due to query control plane timeout ARP_CPFAIL - ARP failure due post ARP query message to control plane failure ARP_FROMCP - ARP failure due to deleting ARP entry from control plane ARP_PORTDESTROY - ARP failure due to port destruction ARP_TABLEDESTROY - ARP failure due to ARP table destruction ARP_NETDESTROY - ARP failure due to overlay network destruction
    attr_accessor :arp_fail_reason

    # The id of the component that dropped the traceflow packet.
    attr_accessor :component_id

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'nat_rule_id' => :'nat_rule_id',
        :'reason' => :'reason',
        :'lport_id' => :'lport_id',
        :'lport_name' => :'lport_name',
        :'acl_rule_id' => :'acl_rule_id',
        :'arp_fail_reason' => :'arp_fail_reason',
        :'component_id' => :'component_id'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'nat_rule_id' => :'',
        :'reason' => :'',
        :'lport_id' => :'',
        :'lport_name' => :'',
        :'acl_rule_id' => :'',
        :'arp_fail_reason' => :'',
        :'component_id' => :''
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end
  
    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `NSXT::TraceflowObservationDroppedLogical` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `NSXT::TraceflowObservationDroppedLogical`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      # call parent's initialize
      super(attributes)

      if attributes.key?(:'nat_rule_id')
        self.nat_rule_id = attributes[:'nat_rule_id']
      end

      if attributes.key?(:'reason')
        self.reason = attributes[:'reason']
      end

      if attributes.key?(:'lport_id')
        self.lport_id = attributes[:'lport_id']
      end

      if attributes.key?(:'lport_name')
        self.lport_name = attributes[:'lport_name']
      end

      if attributes.key?(:'acl_rule_id')
        self.acl_rule_id = attributes[:'acl_rule_id']
      end

      if attributes.key?(:'arp_fail_reason')
        self.arp_fail_reason = attributes[:'arp_fail_reason']
      end

      if attributes.key?(:'component_id')
        self.component_id = attributes[:'component_id']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = super
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      reason_validator = EnumAttributeValidator.new('', ['ARP_FAIL', 'BFD', 'DHCP', 'FW_RULE', 'GENEVE', 'GRE', 'IFACE', 'IP', 'IP_REASS', 'IPSEC', 'IPSEC_VTI', 'L2VPN', 'L4PORT', 'LB', 'LROUTER', 'LSERVICE', 'LSWITCH', 'MD_PROXY', 'NAT', 'ND_NS_FAIL', 'NEIGH', 'NO_EIP_FOUND', 'NO_EIP_ASSOCIATION', 'NO_ENI_FOR_IP', 'NO_ENI_FOR_LIF', 'NO_ROUTE', 'NO_ROUTE_TABLE_FOUND', 'NO_UNDERLAY_ROUTE_FOUND', 'NOT_VDR_DOWNLINK,', 'NO_VDR_FOUND', 'NO_VDR_ON_HOST', 'NOT_VDR_UPLINK,', 'SERVICE_INSERT', 'TTL_ZERO', 'TUNNEL', 'VXLAN', 'VXSTT', 'VMC_NO_RESPONSE', 'WRONG_UPLINK', 'UNKNOWN'])
      return false unless reason_validator.valid?(@reason)
      arp_fail_reason_validator = EnumAttributeValidator.new('', ['ARP_UNKNOWN', 'ARP_TIMEOUT', 'ARP_CPFAIL', 'ARP_FROMCP', 'ARP_PORTDESTROY', 'ARP_TABLEDESTROY', 'ARP_NETDESTROY'])
      return false unless arp_fail_reason_validator.valid?(@arp_fail_reason)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] reason Object to be assigned
    def reason=(reason)
      validator = EnumAttributeValidator.new('', ['ARP_FAIL', 'BFD', 'DHCP', 'FW_RULE', 'GENEVE', 'GRE', 'IFACE', 'IP', 'IP_REASS', 'IPSEC', 'IPSEC_VTI', 'L2VPN', 'L4PORT', 'LB', 'LROUTER', 'LSERVICE', 'LSWITCH', 'MD_PROXY', 'NAT', 'ND_NS_FAIL', 'NEIGH', 'NO_EIP_FOUND', 'NO_EIP_ASSOCIATION', 'NO_ENI_FOR_IP', 'NO_ENI_FOR_LIF', 'NO_ROUTE', 'NO_ROUTE_TABLE_FOUND', 'NO_UNDERLAY_ROUTE_FOUND', 'NOT_VDR_DOWNLINK,', 'NO_VDR_FOUND', 'NO_VDR_ON_HOST', 'NOT_VDR_UPLINK,', 'SERVICE_INSERT', 'TTL_ZERO', 'TUNNEL', 'VXLAN', 'VXSTT', 'VMC_NO_RESPONSE', 'WRONG_UPLINK', 'UNKNOWN'])
      unless validator.valid?(reason)
        fail ArgumentError, "invalid value for \"reason\", must be one of #{validator.allowable_values}."
      end
      @reason = reason
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] arp_fail_reason Object to be assigned
    def arp_fail_reason=(arp_fail_reason)
      validator = EnumAttributeValidator.new('', ['ARP_UNKNOWN', 'ARP_TIMEOUT', 'ARP_CPFAIL', 'ARP_FROMCP', 'ARP_PORTDESTROY', 'ARP_TABLEDESTROY', 'ARP_NETDESTROY'])
      unless validator.valid?(arp_fail_reason)
        fail ArgumentError, "invalid value for \"arp_fail_reason\", must be one of #{validator.allowable_values}."
      end
      @arp_fail_reason = arp_fail_reason
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          nat_rule_id == o.nat_rule_id &&
          reason == o.reason &&
          lport_id == o.lport_id &&
          lport_name == o.lport_name &&
          acl_rule_id == o.acl_rule_id &&
          arp_fail_reason == o.arp_fail_reason &&
          component_id == o.component_id && super(o)
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [nat_rule_id, reason, lport_id, lport_name, acl_rule_id, arp_fail_reason, component_id].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      super(attributes)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        NSXT.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = super
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end  end
end
