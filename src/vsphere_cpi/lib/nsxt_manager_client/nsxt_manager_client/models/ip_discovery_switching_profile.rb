=begin
#NSX-T Manager API

#VMware NSX-T Manager REST API

OpenAPI spec version: 2.5.1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.25
=end

require 'date'

module NSXT
  class IpDiscoverySwitchingProfile
    attr_accessor :required_capabilities

    attr_accessor :resource_type

    # Indicates whether ARP snooping is enabled
    attr_accessor :arp_snooping_enabled

    # Indicates the number of arp snooped IP addresses to be remembered per LogicalPort. Decreasing this value, will retain the latest bindings from the existing list of address bindings. Increasing this value will retain existing bindings and also learn any new address bindings discovered on the port until the new limit is reached. This limit only applies to IPv4 addresses and is independent of the nd_bindings_limit used for IPv6 snooping.
    attr_accessor :arp_bindings_limit

    # This option is the IPv6 equivalent of DHCP snooping.
    attr_accessor :dhcpv6_snooping_enabled

    # This option is the IPv6 equivalent of ARP snooping.
    attr_accessor :nd_snooping_enabled

    # This option is only supported on ESX where vm-tools is installed.
    attr_accessor :vm_tools_v6_enabled

    # Indicates whether DHCP snooping is enabled
    attr_accessor :dhcp_snooping_enabled

    # This property controls the ARP and ND cache timeout period.It is recommended that this property be greater than the ARP/ND cache timeout on the VM. 
    attr_accessor :arp_nd_binding_timeout

    # This option is only supported on ESX where vm-tools is installed.
    attr_accessor :vm_tools_enabled

    # ARP snooping being inherently susceptible to ARP spoofing, uses a turst-on-fisrt-use (TOFU) paradigm where only the first IP address discovered via ARP snooping is trusted. The remaining are ignored. In order to allow for more flexibility, we allow the user to configure how many ARP snooped address bindings should be trusted for the lifetime of the logical port. This is controlled by the arp_bindings_limit property in the IP Discovery profile. We refer to this extension of TOFU as N-TOFU. However, if TOFU is disabled, then N ARP snooped IP addresses will be trusted until they are timed out, where N is configured by arp_bindings_limit. 
    attr_accessor :trust_on_first_use_enabled

    # Indicates the number of neighbor-discovery snooped IP addresses to be remembered per LogicalPort. Decreasing this value, will retain the latest bindings from the existing list of address bindings. Increasing this value will retain existing bindings and also learn any new address bindings discovered on the port until the new limit is reached. This limit only applies to IPv6 addresses and is independent of the arp_bindings_limit used for IPv4 snooping.
    attr_accessor :nd_bindings_limit

    attr_accessor :duplicate_ip_detection

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'required_capabilities' => :'required_capabilities',
        :'resource_type' => :'resource_type',
        :'arp_snooping_enabled' => :'arp_snooping_enabled',
        :'arp_bindings_limit' => :'arp_bindings_limit',
        :'dhcpv6_snooping_enabled' => :'dhcpv6_snooping_enabled',
        :'nd_snooping_enabled' => :'nd_snooping_enabled',
        :'vm_tools_v6_enabled' => :'vm_tools_v6_enabled',
        :'dhcp_snooping_enabled' => :'dhcp_snooping_enabled',
        :'arp_nd_binding_timeout' => :'arp_nd_binding_timeout',
        :'vm_tools_enabled' => :'vm_tools_enabled',
        :'trust_on_first_use_enabled' => :'trust_on_first_use_enabled',
        :'nd_bindings_limit' => :'nd_bindings_limit',
        :'duplicate_ip_detection' => :'duplicate_ip_detection'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'required_capabilities' => :'',
        :'resource_type' => :'',
        :'arp_snooping_enabled' => :'',
        :'arp_bindings_limit' => :'',
        :'dhcpv6_snooping_enabled' => :'',
        :'nd_snooping_enabled' => :'',
        :'vm_tools_v6_enabled' => :'',
        :'dhcp_snooping_enabled' => :'',
        :'arp_nd_binding_timeout' => :'',
        :'vm_tools_enabled' => :'',
        :'trust_on_first_use_enabled' => :'',
        :'nd_bindings_limit' => :'',
        :'duplicate_ip_detection' => :''
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end
  
    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `NSXT::IpDiscoverySwitchingProfile` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `NSXT::IpDiscoverySwitchingProfile`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      # call parent's initialize
      super(attributes)

      if attributes.key?(:'required_capabilities')
        if (value = attributes[:'required_capabilities']).is_a?(Array)
          self.required_capabilities = value
        end
      end

      if attributes.key?(:'resource_type')
        self.resource_type = attributes[:'resource_type']
      end

      if attributes.key?(:'arp_snooping_enabled')
        self.arp_snooping_enabled = attributes[:'arp_snooping_enabled']
      else
        self.arp_snooping_enabled = true
      end

      if attributes.key?(:'arp_bindings_limit')
        self.arp_bindings_limit = attributes[:'arp_bindings_limit']
      else
        self.arp_bindings_limit = 1
      end

      if attributes.key?(:'dhcpv6_snooping_enabled')
        self.dhcpv6_snooping_enabled = attributes[:'dhcpv6_snooping_enabled']
      else
        self.dhcpv6_snooping_enabled = false
      end

      if attributes.key?(:'nd_snooping_enabled')
        self.nd_snooping_enabled = attributes[:'nd_snooping_enabled']
      else
        self.nd_snooping_enabled = false
      end

      if attributes.key?(:'vm_tools_v6_enabled')
        self.vm_tools_v6_enabled = attributes[:'vm_tools_v6_enabled']
      else
        self.vm_tools_v6_enabled = false
      end

      if attributes.key?(:'dhcp_snooping_enabled')
        self.dhcp_snooping_enabled = attributes[:'dhcp_snooping_enabled']
      else
        self.dhcp_snooping_enabled = true
      end

      if attributes.key?(:'arp_nd_binding_timeout')
        self.arp_nd_binding_timeout = attributes[:'arp_nd_binding_timeout']
      else
        self.arp_nd_binding_timeout = 10
      end

      if attributes.key?(:'vm_tools_enabled')
        self.vm_tools_enabled = attributes[:'vm_tools_enabled']
      else
        self.vm_tools_enabled = true
      end

      if attributes.key?(:'trust_on_first_use_enabled')
        self.trust_on_first_use_enabled = attributes[:'trust_on_first_use_enabled']
      else
        self.trust_on_first_use_enabled = true
      end

      if attributes.key?(:'nd_bindings_limit')
        self.nd_bindings_limit = attributes[:'nd_bindings_limit']
      else
        self.nd_bindings_limit = 3
      end

      if attributes.key?(:'duplicate_ip_detection')
        self.duplicate_ip_detection = attributes[:'duplicate_ip_detection']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = super
      if @resource_type.nil?
        invalid_properties.push('invalid value for "resource_type", resource_type cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @resource_type.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          required_capabilities == o.required_capabilities &&
          resource_type == o.resource_type &&
          arp_snooping_enabled == o.arp_snooping_enabled &&
          arp_bindings_limit == o.arp_bindings_limit &&
          dhcpv6_snooping_enabled == o.dhcpv6_snooping_enabled &&
          nd_snooping_enabled == o.nd_snooping_enabled &&
          vm_tools_v6_enabled == o.vm_tools_v6_enabled &&
          dhcp_snooping_enabled == o.dhcp_snooping_enabled &&
          arp_nd_binding_timeout == o.arp_nd_binding_timeout &&
          vm_tools_enabled == o.vm_tools_enabled &&
          trust_on_first_use_enabled == o.trust_on_first_use_enabled &&
          nd_bindings_limit == o.nd_bindings_limit &&
          duplicate_ip_detection == o.duplicate_ip_detection && super(o)
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [required_capabilities, resource_type, arp_snooping_enabled, arp_bindings_limit, dhcpv6_snooping_enabled, nd_snooping_enabled, vm_tools_v6_enabled, dhcp_snooping_enabled, arp_nd_binding_timeout, vm_tools_enabled, trust_on_first_use_enabled, nd_bindings_limit, duplicate_ip_detection].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      super(attributes)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        NSXT.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = super
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end  end
end
