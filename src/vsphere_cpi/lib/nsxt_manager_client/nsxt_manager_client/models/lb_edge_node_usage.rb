=begin
#NSX-T Manager API

#VMware NSX-T Manager REST API

OpenAPI spec version: 2.5.1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.25
=end

require 'date'

module NSXT
  # The capacity contains basic information and load balancer entity usages and capacity for the given edge node. 
  class LbEdgeNodeUsage
    # The property identifies the node UUID for load balancer node usage. 
    attr_accessor :node_id

    # The property identifies the load balancer node usage type. 
    attr_accessor :type

    # The current credit number reflects the current usage on the node. For example, configuring a medium load balancer on a node consumes 10 credits. If there are 2 medium instances configured on a node, the current credit number is 2 * 10 = 20. 
    attr_accessor :current_credit_number

    # The number of virtual servers configured on the node. 
    attr_accessor :current_virtual_servers

    # The number of small load balancer services configured on the node. 
    attr_accessor :current_small_load_balancer_services

    # The number of pool members configured on the node. 
    attr_accessor :current_pool_members

    # The severity calculation is based on current credit usage percentage of load balancer for one node. 
    attr_accessor :severity

    # The number of pools configured on the node. 
    attr_accessor :current_pools

    # The remaining number of pool members which could be configured on the given edge node. 
    attr_accessor :remaining_pool_members

    # The ID of edge cluster which contains the edge node. 
    attr_accessor :edge_cluster_id

    # The remaining number of small load balancer services which could be configured on the given edge node. 
    attr_accessor :remaining_small_load_balancer_services

    # The form factor of the given edge node. 
    attr_accessor :form_factor

    # The usage percentage of one edge node for the load balancer services. 
    attr_accessor :usage_percentage

    # The number of large load balancer services configured on the node. 
    attr_accessor :current_large_load_balancer_services

    # The remaining credit number is the remaining credits that can be used for load balancer service configuration. For example, an edge node with form factor LARGE_VIRTUAL_MACHINE has 40 credits, and a medium load balancer instance costs 10 credits. If there are currently 3 medium instances configured, the remaining credit number is 40 - (3 * 10) = 10. 
    attr_accessor :remaining_credit_number

    # The remaining number of large load balancer services which could be configured on the given edge node. 
    attr_accessor :remaining_large_load_balancer_services

    # The remaining number of medium load balancer services which could be configured on the given edge node. 
    attr_accessor :remaining_medium_load_balancer_services

    # The number of medium load balancer services configured on the node. 
    attr_accessor :current_medium_load_balancer_services

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'node_id' => :'node_id',
        :'type' => :'type',
        :'current_credit_number' => :'current_credit_number',
        :'current_virtual_servers' => :'current_virtual_servers',
        :'current_small_load_balancer_services' => :'current_small_load_balancer_services',
        :'current_pool_members' => :'current_pool_members',
        :'severity' => :'severity',
        :'current_pools' => :'current_pools',
        :'remaining_pool_members' => :'remaining_pool_members',
        :'edge_cluster_id' => :'edge_cluster_id',
        :'remaining_small_load_balancer_services' => :'remaining_small_load_balancer_services',
        :'form_factor' => :'form_factor',
        :'usage_percentage' => :'usage_percentage',
        :'current_large_load_balancer_services' => :'current_large_load_balancer_services',
        :'remaining_credit_number' => :'remaining_credit_number',
        :'remaining_large_load_balancer_services' => :'remaining_large_load_balancer_services',
        :'remaining_medium_load_balancer_services' => :'remaining_medium_load_balancer_services',
        :'current_medium_load_balancer_services' => :'current_medium_load_balancer_services'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'node_id' => :'',
        :'type' => :'',
        :'current_credit_number' => :'',
        :'current_virtual_servers' => :'',
        :'current_small_load_balancer_services' => :'',
        :'current_pool_members' => :'',
        :'severity' => :'',
        :'current_pools' => :'',
        :'remaining_pool_members' => :'',
        :'edge_cluster_id' => :'',
        :'remaining_small_load_balancer_services' => :'',
        :'form_factor' => :'',
        :'usage_percentage' => :'',
        :'current_large_load_balancer_services' => :'',
        :'remaining_credit_number' => :'',
        :'remaining_large_load_balancer_services' => :'',
        :'remaining_medium_load_balancer_services' => :'',
        :'current_medium_load_balancer_services' => :''
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end
  
    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `NSXT::LbEdgeNodeUsage` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `NSXT::LbEdgeNodeUsage`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      # call parent's initialize
      super(attributes)

      if attributes.key?(:'node_id')
        self.node_id = attributes[:'node_id']
      end

      if attributes.key?(:'type')
        self.type = attributes[:'type']
      end

      if attributes.key?(:'current_credit_number')
        self.current_credit_number = attributes[:'current_credit_number']
      end

      if attributes.key?(:'current_virtual_servers')
        self.current_virtual_servers = attributes[:'current_virtual_servers']
      end

      if attributes.key?(:'current_small_load_balancer_services')
        self.current_small_load_balancer_services = attributes[:'current_small_load_balancer_services']
      end

      if attributes.key?(:'current_pool_members')
        self.current_pool_members = attributes[:'current_pool_members']
      end

      if attributes.key?(:'severity')
        self.severity = attributes[:'severity']
      end

      if attributes.key?(:'current_pools')
        self.current_pools = attributes[:'current_pools']
      end

      if attributes.key?(:'remaining_pool_members')
        self.remaining_pool_members = attributes[:'remaining_pool_members']
      end

      if attributes.key?(:'edge_cluster_id')
        self.edge_cluster_id = attributes[:'edge_cluster_id']
      end

      if attributes.key?(:'remaining_small_load_balancer_services')
        self.remaining_small_load_balancer_services = attributes[:'remaining_small_load_balancer_services']
      end

      if attributes.key?(:'form_factor')
        self.form_factor = attributes[:'form_factor']
      end

      if attributes.key?(:'usage_percentage')
        self.usage_percentage = attributes[:'usage_percentage']
      end

      if attributes.key?(:'current_large_load_balancer_services')
        self.current_large_load_balancer_services = attributes[:'current_large_load_balancer_services']
      end

      if attributes.key?(:'remaining_credit_number')
        self.remaining_credit_number = attributes[:'remaining_credit_number']
      end

      if attributes.key?(:'remaining_large_load_balancer_services')
        self.remaining_large_load_balancer_services = attributes[:'remaining_large_load_balancer_services']
      end

      if attributes.key?(:'remaining_medium_load_balancer_services')
        self.remaining_medium_load_balancer_services = attributes[:'remaining_medium_load_balancer_services']
      end

      if attributes.key?(:'current_medium_load_balancer_services')
        self.current_medium_load_balancer_services = attributes[:'current_medium_load_balancer_services']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = super
      if @node_id.nil?
        invalid_properties.push('invalid value for "node_id", node_id cannot be nil.')
      end

      if @type.nil?
        invalid_properties.push('invalid value for "type", type cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @node_id.nil?
      return false if @type.nil?
      type_validator = EnumAttributeValidator.new('', ['LbEdgeNodeUsage'])
      return false unless type_validator.valid?(@type)
      severity_validator = EnumAttributeValidator.new('', ['GREEN', 'ORANGE', 'RED'])
      return false unless severity_validator.valid?(@severity)
      form_factor_validator = EnumAttributeValidator.new('', ['SMALL_VIRTUAL_MACHINE', 'MEDIUM_VIRTUAL_MACHINE', 'LARGE_VIRTUAL_MACHINE', 'PHYSICAL_MACHINE'])
      return false unless form_factor_validator.valid?(@form_factor)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] type Object to be assigned
    def type=(type)
      validator = EnumAttributeValidator.new('', ['LbEdgeNodeUsage'])
      unless validator.valid?(type)
        fail ArgumentError, "invalid value for \"type\", must be one of #{validator.allowable_values}."
      end
      @type = type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] severity Object to be assigned
    def severity=(severity)
      validator = EnumAttributeValidator.new('', ['GREEN', 'ORANGE', 'RED'])
      unless validator.valid?(severity)
        fail ArgumentError, "invalid value for \"severity\", must be one of #{validator.allowable_values}."
      end
      @severity = severity
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] form_factor Object to be assigned
    def form_factor=(form_factor)
      validator = EnumAttributeValidator.new('', ['SMALL_VIRTUAL_MACHINE', 'MEDIUM_VIRTUAL_MACHINE', 'LARGE_VIRTUAL_MACHINE', 'PHYSICAL_MACHINE'])
      unless validator.valid?(form_factor)
        fail ArgumentError, "invalid value for \"form_factor\", must be one of #{validator.allowable_values}."
      end
      @form_factor = form_factor
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          node_id == o.node_id &&
          type == o.type &&
          current_credit_number == o.current_credit_number &&
          current_virtual_servers == o.current_virtual_servers &&
          current_small_load_balancer_services == o.current_small_load_balancer_services &&
          current_pool_members == o.current_pool_members &&
          severity == o.severity &&
          current_pools == o.current_pools &&
          remaining_pool_members == o.remaining_pool_members &&
          edge_cluster_id == o.edge_cluster_id &&
          remaining_small_load_balancer_services == o.remaining_small_load_balancer_services &&
          form_factor == o.form_factor &&
          usage_percentage == o.usage_percentage &&
          current_large_load_balancer_services == o.current_large_load_balancer_services &&
          remaining_credit_number == o.remaining_credit_number &&
          remaining_large_load_balancer_services == o.remaining_large_load_balancer_services &&
          remaining_medium_load_balancer_services == o.remaining_medium_load_balancer_services &&
          current_medium_load_balancer_services == o.current_medium_load_balancer_services && super(o)
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [node_id, type, current_credit_number, current_virtual_servers, current_small_load_balancer_services, current_pool_members, severity, current_pools, remaining_pool_members, edge_cluster_id, remaining_small_load_balancer_services, form_factor, usage_percentage, current_large_load_balancer_services, remaining_credit_number, remaining_large_load_balancer_services, remaining_medium_load_balancer_services, current_medium_load_balancer_services].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      super(attributes)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        NSXT.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = super
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end  end
end
