=begin
#NSX-T Manager API

#VMware NSX-T Manager REST API

OpenAPI spec version: 2.5.1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.25
=end

require 'date'

module NSXT
  class RedistributionRule
    # Array of redistribution protocols
    attr_accessor :sources

    # RouteMap Id for the filter
    attr_accessor :route_map_id

    # Description
    attr_accessor :description

    # Display name
    attr_accessor :display_name

    # Destination redistribution protocol
    attr_accessor :destination

    # Address family for Route Redistribution
    attr_accessor :address_family

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'sources' => :'sources',
        :'route_map_id' => :'route_map_id',
        :'description' => :'description',
        :'display_name' => :'display_name',
        :'destination' => :'destination',
        :'address_family' => :'address_family'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'sources' => :'Object',
        :'route_map_id' => :'Object',
        :'description' => :'Object',
        :'display_name' => :'Object',
        :'destination' => :'Object',
        :'address_family' => :'Object'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end
  
    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `NSXT::RedistributionRule` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `NSXT::RedistributionRule`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'sources')
        if (value = attributes[:'sources']).is_a?(Array)
          self.sources = value
        end
      end

      if attributes.key?(:'route_map_id')
        self.route_map_id = attributes[:'route_map_id']
      end

      if attributes.key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.key?(:'display_name')
        self.display_name = attributes[:'display_name']
      end

      if attributes.key?(:'destination')
        self.destination = attributes[:'destination']
      end

      if attributes.key?(:'address_family')
        self.address_family = attributes[:'address_family']
      else
        self.address_family = 'IPV4_AND_IPV6'
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @sources.nil?
        invalid_properties.push('invalid value for "sources", sources cannot be nil.')
      end

      if @destination.nil?
        invalid_properties.push('invalid value for "destination", destination cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @sources.nil?
      return false if @destination.nil?
      destination_validator = EnumAttributeValidator.new('Object', ['STATIC', 'T0_STATIC', 'NSX_CONNECTED', 'T0_CONNECTED', 'NSX_STATIC', 'T1_STATIC', 'T0_UPLINK', 'T0_DOWNLINK', 'T0_ROUTER_LINK', 'T0_CSP', 'T0_LOOPBACK', 'T0_DNS_FORWARDER_IP', 'T0_IPSEC_LOCAL_IP', 'TIER0_NAT', 'T0_NAT', 'TIER1_NAT', 'T1_NAT', 'TIER1_LB_VIP', 'T1_LB_VIP', 'TIER1_LB_SNAT', 'T1_LB_SNAT', 'T1_DNS_FORWARDER_IP', 'T1_CONNECTED', 'T1_DOWNLINK', 'T1_CSP', 'BGP', 'T1_IPSEC_LOCAL_IP'])
      return false unless destination_validator.valid?(@destination)
      address_family_validator = EnumAttributeValidator.new('Object', ['IPV4', 'IPV6', 'IPV4_AND_IPV6'])
      return false unless address_family_validator.valid?(@address_family)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] destination Object to be assigned
    def destination=(destination)
      validator = EnumAttributeValidator.new('Object', ['STATIC', 'T0_STATIC', 'NSX_CONNECTED', 'T0_CONNECTED', 'NSX_STATIC', 'T1_STATIC', 'T0_UPLINK', 'T0_DOWNLINK', 'T0_ROUTER_LINK', 'T0_CSP', 'T0_LOOPBACK', 'T0_DNS_FORWARDER_IP', 'T0_IPSEC_LOCAL_IP', 'TIER0_NAT', 'T0_NAT', 'TIER1_NAT', 'T1_NAT', 'TIER1_LB_VIP', 'T1_LB_VIP', 'TIER1_LB_SNAT', 'T1_LB_SNAT', 'T1_DNS_FORWARDER_IP', 'T1_CONNECTED', 'T1_DOWNLINK', 'T1_CSP', 'BGP', 'T1_IPSEC_LOCAL_IP'])
      unless validator.valid?(destination)
        fail ArgumentError, "invalid value for \"destination\", must be one of #{validator.allowable_values}."
      end
      @destination = destination
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] address_family Object to be assigned
    def address_family=(address_family)
      validator = EnumAttributeValidator.new('Object', ['IPV4', 'IPV6', 'IPV4_AND_IPV6'])
      unless validator.valid?(address_family)
        fail ArgumentError, "invalid value for \"address_family\", must be one of #{validator.allowable_values}."
      end
      @address_family = address_family
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          sources == o.sources &&
          route_map_id == o.route_map_id &&
          description == o.description &&
          display_name == o.display_name &&
          destination == o.destination &&
          address_family == o.address_family
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [sources, route_map_id, description, display_name, destination, address_family].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        NSXT.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end  end
end
