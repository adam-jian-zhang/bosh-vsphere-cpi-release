=begin
#NSX-T Manager API

#VMware NSX-T Manager REST API

OpenAPI spec version: 2.5.1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.25
=end

require 'date'

module NSXT
  # Structured data entry in RFC5424 log format
  class StructuredData
    # Audit flag of the log
    attr_accessor :audit

    # Username value of the log
    attr_accessor :username

    # External request Id value of the log
    attr_accessor :ereq_id

    # Level value of the log
    attr_accessor :level

    # Component value of the log
    attr_accessor :comp

    # Error Code value of the log
    attr_accessor :error_code

    # Sub-subcomponent value of the log
    attr_accessor :s2comp

    # Request Id value of the log
    attr_accessor :req_id

    # Entity Id value of the log
    attr_accessor :ent_id

    # Security flag of the log
    attr_accessor :security

    # Subcomponent value of the log
    attr_accessor :subcomp

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'audit' => :'audit',
        :'username' => :'username',
        :'ereq_id' => :'ereq_id',
        :'level' => :'level',
        :'comp' => :'comp',
        :'error_code' => :'error_code',
        :'s2comp' => :'s2comp',
        :'req_id' => :'req_id',
        :'ent_id' => :'ent_id',
        :'security' => :'security',
        :'subcomp' => :'subcomp'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'audit' => :'Object',
        :'username' => :'Object',
        :'ereq_id' => :'Object',
        :'level' => :'Object',
        :'comp' => :'Object',
        :'error_code' => :'Object',
        :'s2comp' => :'Object',
        :'req_id' => :'Object',
        :'ent_id' => :'Object',
        :'security' => :'Object',
        :'subcomp' => :'Object'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end
  
    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `NSXT::StructuredData` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `NSXT::StructuredData`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'audit')
        self.audit = attributes[:'audit']
      end

      if attributes.key?(:'username')
        self.username = attributes[:'username']
      end

      if attributes.key?(:'ereq_id')
        self.ereq_id = attributes[:'ereq_id']
      end

      if attributes.key?(:'level')
        self.level = attributes[:'level']
      end

      if attributes.key?(:'comp')
        self.comp = attributes[:'comp']
      end

      if attributes.key?(:'error_code')
        self.error_code = attributes[:'error_code']
      end

      if attributes.key?(:'s2comp')
        self.s2comp = attributes[:'s2comp']
      end

      if attributes.key?(:'req_id')
        self.req_id = attributes[:'req_id']
      end

      if attributes.key?(:'ent_id')
        self.ent_id = attributes[:'ent_id']
      end

      if attributes.key?(:'security')
        self.security = attributes[:'security']
      end

      if attributes.key?(:'subcomp')
        self.subcomp = attributes[:'subcomp']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @audit.nil?
        invalid_properties.push('invalid value for "audit", audit cannot be nil.')
      end

      if @comp.nil?
        invalid_properties.push('invalid value for "comp", comp cannot be nil.')
      end

      if @subcomp.nil?
        invalid_properties.push('invalid value for "subcomp", subcomp cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @audit.nil?
      return false if @comp.nil?
      return false if @subcomp.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          audit == o.audit &&
          username == o.username &&
          ereq_id == o.ereq_id &&
          level == o.level &&
          comp == o.comp &&
          error_code == o.error_code &&
          s2comp == o.s2comp &&
          req_id == o.req_id &&
          ent_id == o.ent_id &&
          security == o.security &&
          subcomp == o.subcomp
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [audit, username, ereq_id, level, comp, error_code, s2comp, req_id, ent_id, security, subcomp].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        NSXT.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end  end
end
