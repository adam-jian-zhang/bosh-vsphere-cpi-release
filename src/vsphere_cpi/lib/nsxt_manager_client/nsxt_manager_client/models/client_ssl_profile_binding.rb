=begin
#NSX-T Manager API

#VMware NSX-T Manager REST API

OpenAPI spec version: 2.5.1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.25
=end

require 'date'

module NSXT
  class ClientSslProfileBinding
    # client authentication mode
    attr_accessor :client_auth

    # Client SSL profile defines reusable, application-independent client side SSL properties. 
    attr_accessor :ssl_profile_id

    # authentication depth is used to set the verification depth in the client certificates chain. 
    attr_accessor :certificate_chain_depth

    # If client auth type is REQUIRED, client certificate must be signed by one of the trusted Certificate Authorities (CAs), also referred to as root CAs, whose self signed certificates are specified. 
    attr_accessor :client_auth_ca_ids

    # A default certificate should be specified which will be used if the server does not host multiple hostnames on the same IP address or if the client does not support SNI extension. 
    attr_accessor :default_certificate_id

    # Client-side SSL profile binding allows multiple certificates, for different hostnames, to be bound to the same virtual server. 
    attr_accessor :sni_certificate_ids

    # A Certificate Revocation List (CRL) can be specified in the client-side SSL profile binding to disallow compromised client certificates. 
    attr_accessor :client_auth_crl_ids

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'client_auth' => :'client_auth',
        :'ssl_profile_id' => :'ssl_profile_id',
        :'certificate_chain_depth' => :'certificate_chain_depth',
        :'client_auth_ca_ids' => :'client_auth_ca_ids',
        :'default_certificate_id' => :'default_certificate_id',
        :'sni_certificate_ids' => :'sni_certificate_ids',
        :'client_auth_crl_ids' => :'client_auth_crl_ids'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'client_auth' => :'Object',
        :'ssl_profile_id' => :'Object',
        :'certificate_chain_depth' => :'Object',
        :'client_auth_ca_ids' => :'Object',
        :'default_certificate_id' => :'Object',
        :'sni_certificate_ids' => :'Object',
        :'client_auth_crl_ids' => :'Object'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end
  
    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `NSXT::ClientSslProfileBinding` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `NSXT::ClientSslProfileBinding`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'client_auth')
        self.client_auth = attributes[:'client_auth']
      else
        self.client_auth = 'IGNORE'
      end

      if attributes.key?(:'ssl_profile_id')
        self.ssl_profile_id = attributes[:'ssl_profile_id']
      end

      if attributes.key?(:'certificate_chain_depth')
        self.certificate_chain_depth = attributes[:'certificate_chain_depth']
      else
        self.certificate_chain_depth = 3
      end

      if attributes.key?(:'client_auth_ca_ids')
        if (value = attributes[:'client_auth_ca_ids']).is_a?(Array)
          self.client_auth_ca_ids = value
        end
      end

      if attributes.key?(:'default_certificate_id')
        self.default_certificate_id = attributes[:'default_certificate_id']
      end

      if attributes.key?(:'sni_certificate_ids')
        if (value = attributes[:'sni_certificate_ids']).is_a?(Array)
          self.sni_certificate_ids = value
        end
      end

      if attributes.key?(:'client_auth_crl_ids')
        if (value = attributes[:'client_auth_crl_ids']).is_a?(Array)
          self.client_auth_crl_ids = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @default_certificate_id.nil?
        invalid_properties.push('invalid value for "default_certificate_id", default_certificate_id cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      client_auth_validator = EnumAttributeValidator.new('Object', ['REQUIRED', 'IGNORE'])
      return false unless client_auth_validator.valid?(@client_auth)
      return false if @default_certificate_id.nil?
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] client_auth Object to be assigned
    def client_auth=(client_auth)
      validator = EnumAttributeValidator.new('Object', ['REQUIRED', 'IGNORE'])
      unless validator.valid?(client_auth)
        fail ArgumentError, "invalid value for \"client_auth\", must be one of #{validator.allowable_values}."
      end
      @client_auth = client_auth
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          client_auth == o.client_auth &&
          ssl_profile_id == o.ssl_profile_id &&
          certificate_chain_depth == o.certificate_chain_depth &&
          client_auth_ca_ids == o.client_auth_ca_ids &&
          default_certificate_id == o.default_certificate_id &&
          sni_certificate_ids == o.sni_certificate_ids &&
          client_auth_crl_ids == o.client_auth_crl_ids
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [client_auth, ssl_profile_id, certificate_chain_depth, client_auth_ca_ids, default_certificate_id, sni_certificate_ids, client_auth_crl_ids].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        NSXT.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end  end
end
