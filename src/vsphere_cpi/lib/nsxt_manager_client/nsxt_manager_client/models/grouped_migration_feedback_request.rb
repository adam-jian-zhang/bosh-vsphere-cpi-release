=begin
#NSX-T Manager API

#VMware NSX-T Manager REST API

OpenAPI spec version: 2.5.1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.25
=end

require 'date'

module NSXT
  # Detailed feedback requests from the migration tool where user input is required.
  class GroupedMigrationFeedbackRequest
    # Indicates if a valid response already exist for all feedback requests in this group.
    attr_accessor :resolved

    # List of acceptable actions for this feedback request.
    attr_accessor :accepted_actions

    # Identify a feedback request type across objects. This can be used to group together objects with similar feedback request and resolve them in one go.
    attr_accessor :hash

    # Functional area that this query falls into.
    attr_accessor :vertical

    # The suggested value to resolve this feedback request.
    attr_accessor :suggested_value

    # Indicates if multiple values can be selected as response from the list of acceptable value.
    attr_accessor :multi_value

    # Functional sub-area that this query falls into.
    attr_accessor :sub_vertical

    # Collection of feedback requests of a given type
    attr_accessor :objects

    # List of acceptable values for this feedback request.
    attr_accessor :accepted_values

    # Detailed feedback request with options.
    attr_accessor :message

    # Data type of the items listed in acceptable values list.
    attr_accessor :accepted_value_type

    # The suggested action to resolve this feedback request.
    attr_accessor :suggested_action

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'resolved' => :'resolved',
        :'accepted_actions' => :'accepted_actions',
        :'hash' => :'hash',
        :'vertical' => :'vertical',
        :'suggested_value' => :'suggested_value',
        :'multi_value' => :'multi_value',
        :'sub_vertical' => :'sub_vertical',
        :'objects' => :'objects',
        :'accepted_values' => :'accepted_values',
        :'message' => :'message',
        :'accepted_value_type' => :'accepted_value_type',
        :'suggested_action' => :'suggested_action'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'resolved' => :'Object',
        :'accepted_actions' => :'Object',
        :'hash' => :'Object',
        :'vertical' => :'Object',
        :'suggested_value' => :'Object',
        :'multi_value' => :'Object',
        :'sub_vertical' => :'Object',
        :'objects' => :'Object',
        :'accepted_values' => :'Object',
        :'message' => :'Object',
        :'accepted_value_type' => :'Object',
        :'suggested_action' => :'Object'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end
  
    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `NSXT::GroupedMigrationFeedbackRequest` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `NSXT::GroupedMigrationFeedbackRequest`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'resolved')
        self.resolved = attributes[:'resolved']
      end

      if attributes.key?(:'accepted_actions')
        if (value = attributes[:'accepted_actions']).is_a?(Array)
          self.accepted_actions = value
        end
      end

      if attributes.key?(:'hash')
        self.hash = attributes[:'hash']
      end

      if attributes.key?(:'vertical')
        self.vertical = attributes[:'vertical']
      end

      if attributes.key?(:'suggested_value')
        self.suggested_value = attributes[:'suggested_value']
      end

      if attributes.key?(:'multi_value')
        self.multi_value = attributes[:'multi_value']
      end

      if attributes.key?(:'sub_vertical')
        self.sub_vertical = attributes[:'sub_vertical']
      end

      if attributes.key?(:'objects')
        if (value = attributes[:'objects']).is_a?(Array)
          self.objects = value
        end
      end

      if attributes.key?(:'accepted_values')
        if (value = attributes[:'accepted_values']).is_a?(Array)
          self.accepted_values = value
        end
      end

      if attributes.key?(:'message')
        self.message = attributes[:'message']
      end

      if attributes.key?(:'accepted_value_type')
        self.accepted_value_type = attributes[:'accepted_value_type']
      end

      if attributes.key?(:'suggested_action')
        self.suggested_action = attributes[:'suggested_action']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @objects.nil?
        invalid_properties.push('invalid value for "objects", objects cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @objects.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          resolved == o.resolved &&
          accepted_actions == o.accepted_actions &&
          hash == o.hash &&
          vertical == o.vertical &&
          suggested_value == o.suggested_value &&
          multi_value == o.multi_value &&
          sub_vertical == o.sub_vertical &&
          objects == o.objects &&
          accepted_values == o.accepted_values &&
          message == o.message &&
          accepted_value_type == o.accepted_value_type &&
          suggested_action == o.suggested_action
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [resolved, accepted_actions, hash, vertical, suggested_value, multi_value, sub_vertical, objects, accepted_values, message, accepted_value_type, suggested_action].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        NSXT.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end  end
end
