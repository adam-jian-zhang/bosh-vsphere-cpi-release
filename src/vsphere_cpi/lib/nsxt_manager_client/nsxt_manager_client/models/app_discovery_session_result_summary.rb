=begin
#NSX-T Manager API

#VMware NSX-T Manager REST API

OpenAPI spec version: 2.5.1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.25
=end

require 'date'

module NSXT
  # Contains the summary of the results of an application discovery session 
  class AppDiscoverySessionResultSummary
    # The status of the session
    attr_accessor :status

    # End time of the session expressed in milliseconds since epoch
    attr_accessor :end_timestamp

    # Start time of the session expressed in milliseconds since epoch
    attr_accessor :start_timestamp

    # The reason for the session status failure.
    attr_accessor :failed_reason

    # Some App Profiles that were part of the discovery session could be modified or deleted | after the session has been completed. NOT_REQUIRED status denotes that there were no such modifications. | REQUIRED status denotes some App Profiles that were part of the session has been modified/deleted and some | and some applications might not have been classfifed correctly. Use /session/<session-id>/reclassify API to| re-classfy the applications discovered based on app profiles. 
    attr_accessor :reclassification

    # List of App Profiles summary discovered in this session
    attr_accessor :app_profile_summary_list

    # List of NSGroups provided for discovery for this session
    attr_accessor :ns_groups

    # List of app profiles targeted to be classified for this session
    attr_accessor :app_profiles

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'status' => :'status',
        :'end_timestamp' => :'end_timestamp',
        :'start_timestamp' => :'start_timestamp',
        :'failed_reason' => :'failed_reason',
        :'reclassification' => :'reclassification',
        :'app_profile_summary_list' => :'app_profile_summary_list',
        :'ns_groups' => :'ns_groups',
        :'app_profiles' => :'app_profiles'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'status' => :'',
        :'end_timestamp' => :'',
        :'start_timestamp' => :'',
        :'failed_reason' => :'',
        :'reclassification' => :'',
        :'app_profile_summary_list' => :'',
        :'ns_groups' => :'',
        :'app_profiles' => :''
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end
  
    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `NSXT::AppDiscoverySessionResultSummary` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `NSXT::AppDiscoverySessionResultSummary`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      # call parent's initialize
      super(attributes)

      if attributes.key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.key?(:'end_timestamp')
        self.end_timestamp = attributes[:'end_timestamp']
      end

      if attributes.key?(:'start_timestamp')
        self.start_timestamp = attributes[:'start_timestamp']
      end

      if attributes.key?(:'failed_reason')
        self.failed_reason = attributes[:'failed_reason']
      end

      if attributes.key?(:'reclassification')
        self.reclassification = attributes[:'reclassification']
      end

      if attributes.key?(:'app_profile_summary_list')
        if (value = attributes[:'app_profile_summary_list']).is_a?(Array)
          self.app_profile_summary_list = value
        end
      end

      if attributes.key?(:'ns_groups')
        if (value = attributes[:'ns_groups']).is_a?(Array)
          self.ns_groups = value
        end
      end

      if attributes.key?(:'app_profiles')
        if (value = attributes[:'app_profiles']).is_a?(Array)
          self.app_profiles = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = super
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      status_validator = EnumAttributeValidator.new('', ['FAILED', 'RUNNING', 'FINISHED'])
      return false unless status_validator.valid?(@status)
      reclassification_validator = EnumAttributeValidator.new('', ['NOT_REQUIRED', 'REQUIRED'])
      return false unless reclassification_validator.valid?(@reclassification)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(status)
      validator = EnumAttributeValidator.new('', ['FAILED', 'RUNNING', 'FINISHED'])
      unless validator.valid?(status)
        fail ArgumentError, "invalid value for \"status\", must be one of #{validator.allowable_values}."
      end
      @status = status
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] reclassification Object to be assigned
    def reclassification=(reclassification)
      validator = EnumAttributeValidator.new('', ['NOT_REQUIRED', 'REQUIRED'])
      unless validator.valid?(reclassification)
        fail ArgumentError, "invalid value for \"reclassification\", must be one of #{validator.allowable_values}."
      end
      @reclassification = reclassification
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          status == o.status &&
          end_timestamp == o.end_timestamp &&
          start_timestamp == o.start_timestamp &&
          failed_reason == o.failed_reason &&
          reclassification == o.reclassification &&
          app_profile_summary_list == o.app_profile_summary_list &&
          ns_groups == o.ns_groups &&
          app_profiles == o.app_profiles && super(o)
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [status, end_timestamp, start_timestamp, failed_reason, reclassification, app_profile_summary_list, ns_groups, app_profiles].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      super(attributes)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        NSXT.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = super
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end  end
end
