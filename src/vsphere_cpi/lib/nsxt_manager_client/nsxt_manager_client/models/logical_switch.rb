=begin
#NSX-T Manager API

#VMware NSX-T Manager REST API

OpenAPI spec version: 2.5.1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.25
=end

require 'date'

module NSXT
  class LogicalSwitch
    # Indicates system owned resource
    attr_accessor :_system_owned

    # Defaults to ID if not set
    attr_accessor :display_name

    # Description of this resource
    attr_accessor :description

    # Opaque identifiers meaningful to the API user
    attr_accessor :tags

    # ID of the user who created this resource
    attr_accessor :_create_user

    # Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed             to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed                 to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super                    user and can modify it, but only when providing                    the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this           entity. 
    attr_accessor :_protection

    # Timestamp of resource creation
    attr_accessor :_create_time

    # Timestamp of last modification
    attr_accessor :_last_modified_time

    # ID of the user who last modified this resource
    attr_accessor :_last_modified_user

    # Unique identifier of this resource
    attr_accessor :id

    # The type of this resource.
    attr_accessor :resource_type

    # This field indicates purpose of a LogicalSwitch. It is set by manager internally or user can provide this field. If not set, DEFAULT type is assigned. NSX components can use this field to create LogicalSwitch that provides component specific functionality. DEFAULT type LogicalSwitches are created for basic L2 connectivity by API users. SERVICE_PLANE type LogicalSwitches are system created service plane LogicalSwitches for Service Insertion service. User can not create SERVICE_PLANE type of LogicalSwitch. DHCP_RELAY type LogicalSwitches are created by external user like Policy with special permissions or by system and will be treated as internal LogicalSwitches. Such LogicalSwitch will not be exposed to vSphere user. 
    attr_accessor :switch_type

    # Replication mode of the Logical Switch
    attr_accessor :replication_mode

    # This property could be used for vendor specific configuration in key value string pairs, the setting in extra_configs will be automatically inheritted by logical ports in the logical switch. 
    attr_accessor :extra_configs

    # This name has to be one of the switching uplink teaming policy names listed inside the logical switch's TransportZone. If this field is not specified, the logical switch will not have a teaming policy associated with it and the host switch's default teaming policy will be used.
    attr_accessor :uplink_teaming_policy_name

    # Id of the TransportZone to which this LogicalSwitch is associated
    attr_accessor :transport_zone_id

    # IP pool id that associated with a LogicalSwitch.
    attr_accessor :ip_pool_id

    # This property is dedicated to VLAN based network, to set VLAN of logical network. It is mutually exclusive with 'vlan_trunk_spec'. 
    attr_accessor :vlan

    # If this flag is set to true, then all the logical switch ports attached to this logical switch will behave in a hybrid fashion. The hybrid logical switch port indicates to NSX that the VM intends to operate in underlay mode, but retains the ability to forward egress traffic to the NSX overlay network. This flag can be enabled only for the logical switches in the overlay type transport zone which has host switch mode as STANDARD and also has either CrossCloud or CloudScope tag scopes. Only the NSX public cloud gateway (PCG) uses this flag, other host agents like ESX, KVM and Edge will ignore it. This property cannot be modified once the logical switch is created. 
    attr_accessor :hybrid

    # Mac pool id that associated with a LogicalSwitch.
    attr_accessor :mac_pool_id

    # Only for OVERLAY network. A VNI will be auto-allocated from the default VNI pool if not given; otherwise the given VNI has to be inside the default pool and not used by any other LogicalSwitch. 
    attr_accessor :vni

    attr_accessor :vlan_trunk_spec

    # Represents Desired state of the Logical Switch
    attr_accessor :admin_state

    # Address bindings for the Logical switch
    attr_accessor :address_bindings

    attr_accessor :switching_profile_ids

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'_system_owned' => :'_system_owned',
        :'display_name' => :'display_name',
        :'description' => :'description',
        :'tags' => :'tags',
        :'_create_user' => :'_create_user',
        :'_protection' => :'_protection',
        :'_create_time' => :'_create_time',
        :'_last_modified_time' => :'_last_modified_time',
        :'_last_modified_user' => :'_last_modified_user',
        :'id' => :'id',
        :'resource_type' => :'resource_type',
        :'switch_type' => :'switch_type',
        :'replication_mode' => :'replication_mode',
        :'extra_configs' => :'extra_configs',
        :'uplink_teaming_policy_name' => :'uplink_teaming_policy_name',
        :'transport_zone_id' => :'transport_zone_id',
        :'ip_pool_id' => :'ip_pool_id',
        :'vlan' => :'vlan',
        :'hybrid' => :'hybrid',
        :'mac_pool_id' => :'mac_pool_id',
        :'vni' => :'vni',
        :'vlan_trunk_spec' => :'vlan_trunk_spec',
        :'admin_state' => :'admin_state',
        :'address_bindings' => :'address_bindings',
        :'switching_profile_ids' => :'switching_profile_ids'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'_system_owned' => :'',
        :'display_name' => :'',
        :'description' => :'',
        :'tags' => :'',
        :'_create_user' => :'',
        :'_protection' => :'',
        :'_create_time' => :'',
        :'_last_modified_time' => :'',
        :'_last_modified_user' => :'',
        :'id' => :'',
        :'resource_type' => :'',
        :'switch_type' => :'',
        :'replication_mode' => :'',
        :'extra_configs' => :'',
        :'uplink_teaming_policy_name' => :'',
        :'transport_zone_id' => :'',
        :'ip_pool_id' => :'',
        :'vlan' => :'',
        :'hybrid' => :'',
        :'mac_pool_id' => :'',
        :'vni' => :'',
        :'vlan_trunk_spec' => :'',
        :'admin_state' => :'',
        :'address_bindings' => :'',
        :'switching_profile_ids' => :''
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end
  
    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `NSXT::LogicalSwitch` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `NSXT::LogicalSwitch`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      # call parent's initialize
      super(attributes)

      if attributes.key?(:'_system_owned')
        self._system_owned = attributes[:'_system_owned']
      end

      if attributes.key?(:'display_name')
        self.display_name = attributes[:'display_name']
      end

      if attributes.key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.key?(:'tags')
        if (value = attributes[:'tags']).is_a?(Array)
          self.tags = value
        end
      end

      if attributes.key?(:'_create_user')
        self._create_user = attributes[:'_create_user']
      end

      if attributes.key?(:'_protection')
        self._protection = attributes[:'_protection']
      end

      if attributes.key?(:'_create_time')
        self._create_time = attributes[:'_create_time']
      end

      if attributes.key?(:'_last_modified_time')
        self._last_modified_time = attributes[:'_last_modified_time']
      end

      if attributes.key?(:'_last_modified_user')
        self._last_modified_user = attributes[:'_last_modified_user']
      end

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'resource_type')
        self.resource_type = attributes[:'resource_type']
      end

      if attributes.key?(:'switch_type')
        self.switch_type = attributes[:'switch_type']
      end

      if attributes.key?(:'replication_mode')
        self.replication_mode = attributes[:'replication_mode']
      end

      if attributes.key?(:'extra_configs')
        if (value = attributes[:'extra_configs']).is_a?(Array)
          self.extra_configs = value
        end
      end

      if attributes.key?(:'uplink_teaming_policy_name')
        self.uplink_teaming_policy_name = attributes[:'uplink_teaming_policy_name']
      end

      if attributes.key?(:'transport_zone_id')
        self.transport_zone_id = attributes[:'transport_zone_id']
      end

      if attributes.key?(:'ip_pool_id')
        self.ip_pool_id = attributes[:'ip_pool_id']
      end

      if attributes.key?(:'vlan')
        self.vlan = attributes[:'vlan']
      end

      if attributes.key?(:'hybrid')
        self.hybrid = attributes[:'hybrid']
      else
        self.hybrid = false
      end

      if attributes.key?(:'mac_pool_id')
        self.mac_pool_id = attributes[:'mac_pool_id']
      end

      if attributes.key?(:'vni')
        self.vni = attributes[:'vni']
      end

      if attributes.key?(:'vlan_trunk_spec')
        self.vlan_trunk_spec = attributes[:'vlan_trunk_spec']
      end

      if attributes.key?(:'admin_state')
        self.admin_state = attributes[:'admin_state']
      end

      if attributes.key?(:'address_bindings')
        if (value = attributes[:'address_bindings']).is_a?(Array)
          self.address_bindings = value
        end
      end

      if attributes.key?(:'switching_profile_ids')
        if (value = attributes[:'switching_profile_ids']).is_a?(Array)
          self.switching_profile_ids = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = super
      if @transport_zone_id.nil?
        invalid_properties.push('invalid value for "transport_zone_id", transport_zone_id cannot be nil.')
      end

      if @admin_state.nil?
        invalid_properties.push('invalid value for "admin_state", admin_state cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      switch_type_validator = EnumAttributeValidator.new('', ['DEFAULT', 'SERVICE_PLANE', 'DHCP_RELAY'])
      return false unless switch_type_validator.valid?(@switch_type)
      replication_mode_validator = EnumAttributeValidator.new('', ['MTEP', 'SOURCE'])
      return false unless replication_mode_validator.valid?(@replication_mode)
      return false if @transport_zone_id.nil?
      return false if @admin_state.nil?
      admin_state_validator = EnumAttributeValidator.new('', ['UP', 'DOWN'])
      return false unless admin_state_validator.valid?(@admin_state)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] switch_type Object to be assigned
    def switch_type=(switch_type)
      validator = EnumAttributeValidator.new('', ['DEFAULT', 'SERVICE_PLANE', 'DHCP_RELAY'])
      unless validator.valid?(switch_type)
        fail ArgumentError, "invalid value for \"switch_type\", must be one of #{validator.allowable_values}."
      end
      @switch_type = switch_type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] replication_mode Object to be assigned
    def replication_mode=(replication_mode)
      validator = EnumAttributeValidator.new('', ['MTEP', 'SOURCE'])
      unless validator.valid?(replication_mode)
        fail ArgumentError, "invalid value for \"replication_mode\", must be one of #{validator.allowable_values}."
      end
      @replication_mode = replication_mode
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] admin_state Object to be assigned
    def admin_state=(admin_state)
      validator = EnumAttributeValidator.new('', ['UP', 'DOWN'])
      unless validator.valid?(admin_state)
        fail ArgumentError, "invalid value for \"admin_state\", must be one of #{validator.allowable_values}."
      end
      @admin_state = admin_state
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          _system_owned == o._system_owned &&
          display_name == o.display_name &&
          description == o.description &&
          tags == o.tags &&
          _create_user == o._create_user &&
          _protection == o._protection &&
          _create_time == o._create_time &&
          _last_modified_time == o._last_modified_time &&
          _last_modified_user == o._last_modified_user &&
          id == o.id &&
          resource_type == o.resource_type &&
          switch_type == o.switch_type &&
          replication_mode == o.replication_mode &&
          extra_configs == o.extra_configs &&
          uplink_teaming_policy_name == o.uplink_teaming_policy_name &&
          transport_zone_id == o.transport_zone_id &&
          ip_pool_id == o.ip_pool_id &&
          vlan == o.vlan &&
          hybrid == o.hybrid &&
          mac_pool_id == o.mac_pool_id &&
          vni == o.vni &&
          vlan_trunk_spec == o.vlan_trunk_spec &&
          admin_state == o.admin_state &&
          address_bindings == o.address_bindings &&
          switching_profile_ids == o.switching_profile_ids && super(o)
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [_system_owned, display_name, description, tags, _create_user, _protection, _create_time, _last_modified_time, _last_modified_user, id, resource_type, switch_type, replication_mode, extra_configs, uplink_teaming_policy_name, transport_zone_id, ip_pool_id, vlan, hybrid, mac_pool_id, vni, vlan_trunk_spec, admin_state, address_bindings, switching_profile_ids].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      super(attributes)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        NSXT.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = super
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end  end
end
