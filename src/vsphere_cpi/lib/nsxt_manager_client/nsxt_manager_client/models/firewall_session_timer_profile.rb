=begin
#NSX-T Manager API

#VMware NSX-T Manager REST API

OpenAPI spec version: 2.5.1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.25
=end

require 'date'

module NSXT
  # A profile holding TCP, UDP and ICMP session timeout configuration.
  class FirewallSessionTimerProfile
    # Resource type to use as profile type
    attr_accessor :resource_type

    # The timeout value of connection in seconds after one endpoint sends an RST.
    attr_accessor :tcp_closed

    # The timeout value of connection in seconds after a second packet has been transferred.
    attr_accessor :tcp_opening

    # The timeout value of connection in seconds if the source host sends more than one packet but the destination host has never sent one back.
    attr_accessor :udp_single

    # The timeout value of connection in seconds after both FINs have been exchanged and connection is closed.
    attr_accessor :tcp_finwait

    # The timeout value of connection in seconds after the first packet has been sent.
    attr_accessor :tcp_first_packet

    # The timeout value of connection in seconds after the first FIN has been sent.
    attr_accessor :tcp_closing

    # The timeout value of connection in seconds once the connection has become fully established.
    attr_accessor :tcp_established

    # The timeout value of connection in seconds if both hosts have sent packets.
    attr_accessor :udp_multiple

    # The timeout value for the connection after an ICMP error came back in response to an ICMP packet.
    attr_accessor :icmp_error_reply

    # The timeout value of connection in seconds after the first packet. This will be the initial timeout for the new UDP flow.
    attr_accessor :udp_first_packet

    # The timeout value of connection in seconds after the first packet. This will be the initial timeout for the new ICMP flow.
    attr_accessor :icmp_first_packet

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'resource_type' => :'resource_type',
        :'tcp_closed' => :'tcp_closed',
        :'tcp_opening' => :'tcp_opening',
        :'udp_single' => :'udp_single',
        :'tcp_finwait' => :'tcp_finwait',
        :'tcp_first_packet' => :'tcp_first_packet',
        :'tcp_closing' => :'tcp_closing',
        :'tcp_established' => :'tcp_established',
        :'udp_multiple' => :'udp_multiple',
        :'icmp_error_reply' => :'icmp_error_reply',
        :'udp_first_packet' => :'udp_first_packet',
        :'icmp_first_packet' => :'icmp_first_packet'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'resource_type' => :'',
        :'tcp_closed' => :'',
        :'tcp_opening' => :'',
        :'udp_single' => :'',
        :'tcp_finwait' => :'',
        :'tcp_first_packet' => :'',
        :'tcp_closing' => :'',
        :'tcp_established' => :'',
        :'udp_multiple' => :'',
        :'icmp_error_reply' => :'',
        :'udp_first_packet' => :'',
        :'icmp_first_packet' => :''
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end
  
    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `NSXT::FirewallSessionTimerProfile` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `NSXT::FirewallSessionTimerProfile`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      # call parent's initialize
      super(attributes)

      if attributes.key?(:'resource_type')
        self.resource_type = attributes[:'resource_type']
      end

      if attributes.key?(:'tcp_closed')
        self.tcp_closed = attributes[:'tcp_closed']
      else
        self.tcp_closed = 20
      end

      if attributes.key?(:'tcp_opening')
        self.tcp_opening = attributes[:'tcp_opening']
      else
        self.tcp_opening = 30
      end

      if attributes.key?(:'udp_single')
        self.udp_single = attributes[:'udp_single']
      else
        self.udp_single = 30
      end

      if attributes.key?(:'tcp_finwait')
        self.tcp_finwait = attributes[:'tcp_finwait']
      else
        self.tcp_finwait = 45
      end

      if attributes.key?(:'tcp_first_packet')
        self.tcp_first_packet = attributes[:'tcp_first_packet']
      else
        self.tcp_first_packet = 120
      end

      if attributes.key?(:'tcp_closing')
        self.tcp_closing = attributes[:'tcp_closing']
      else
        self.tcp_closing = 120
      end

      if attributes.key?(:'tcp_established')
        self.tcp_established = attributes[:'tcp_established']
      else
        self.tcp_established = 43200
      end

      if attributes.key?(:'udp_multiple')
        self.udp_multiple = attributes[:'udp_multiple']
      else
        self.udp_multiple = 60
      end

      if attributes.key?(:'icmp_error_reply')
        self.icmp_error_reply = attributes[:'icmp_error_reply']
      else
        self.icmp_error_reply = 10
      end

      if attributes.key?(:'udp_first_packet')
        self.udp_first_packet = attributes[:'udp_first_packet']
      else
        self.udp_first_packet = 60
      end

      if attributes.key?(:'icmp_first_packet')
        self.icmp_first_packet = attributes[:'icmp_first_packet']
      else
        self.icmp_first_packet = 20
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = super
      if @resource_type.nil?
        invalid_properties.push('invalid value for "resource_type", resource_type cannot be nil.')
      end

      if @tcp_closed.nil?
        invalid_properties.push('invalid value for "tcp_closed", tcp_closed cannot be nil.')
      end

      if @tcp_opening.nil?
        invalid_properties.push('invalid value for "tcp_opening", tcp_opening cannot be nil.')
      end

      if @udp_single.nil?
        invalid_properties.push('invalid value for "udp_single", udp_single cannot be nil.')
      end

      if @tcp_finwait.nil?
        invalid_properties.push('invalid value for "tcp_finwait", tcp_finwait cannot be nil.')
      end

      if @tcp_first_packet.nil?
        invalid_properties.push('invalid value for "tcp_first_packet", tcp_first_packet cannot be nil.')
      end

      if @tcp_closing.nil?
        invalid_properties.push('invalid value for "tcp_closing", tcp_closing cannot be nil.')
      end

      if @tcp_established.nil?
        invalid_properties.push('invalid value for "tcp_established", tcp_established cannot be nil.')
      end

      if @udp_multiple.nil?
        invalid_properties.push('invalid value for "udp_multiple", udp_multiple cannot be nil.')
      end

      if @icmp_error_reply.nil?
        invalid_properties.push('invalid value for "icmp_error_reply", icmp_error_reply cannot be nil.')
      end

      if @udp_first_packet.nil?
        invalid_properties.push('invalid value for "udp_first_packet", udp_first_packet cannot be nil.')
      end

      if @icmp_first_packet.nil?
        invalid_properties.push('invalid value for "icmp_first_packet", icmp_first_packet cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @resource_type.nil?
      resource_type_validator = EnumAttributeValidator.new('', ['FirewallSessionTimerProfile', 'FirewallCpuMemThresholdsProfile', 'FirewallFloodProtectionProfile', 'FirewallDnsProfile'])
      return false unless resource_type_validator.valid?(@resource_type)
      return false if @tcp_closed.nil?
      return false if @tcp_opening.nil?
      return false if @udp_single.nil?
      return false if @tcp_finwait.nil?
      return false if @tcp_first_packet.nil?
      return false if @tcp_closing.nil?
      return false if @tcp_established.nil?
      return false if @udp_multiple.nil?
      return false if @icmp_error_reply.nil?
      return false if @udp_first_packet.nil?
      return false if @icmp_first_packet.nil?
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] resource_type Object to be assigned
    def resource_type=(resource_type)
      validator = EnumAttributeValidator.new('', ['FirewallSessionTimerProfile', 'FirewallCpuMemThresholdsProfile', 'FirewallFloodProtectionProfile', 'FirewallDnsProfile'])
      unless validator.valid?(resource_type)
        fail ArgumentError, "invalid value for \"resource_type\", must be one of #{validator.allowable_values}."
      end
      @resource_type = resource_type
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          resource_type == o.resource_type &&
          tcp_closed == o.tcp_closed &&
          tcp_opening == o.tcp_opening &&
          udp_single == o.udp_single &&
          tcp_finwait == o.tcp_finwait &&
          tcp_first_packet == o.tcp_first_packet &&
          tcp_closing == o.tcp_closing &&
          tcp_established == o.tcp_established &&
          udp_multiple == o.udp_multiple &&
          icmp_error_reply == o.icmp_error_reply &&
          udp_first_packet == o.udp_first_packet &&
          icmp_first_packet == o.icmp_first_packet && super(o)
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [resource_type, tcp_closed, tcp_opening, udp_single, tcp_finwait, tcp_first_packet, tcp_closing, tcp_established, udp_multiple, icmp_error_reply, udp_first_packet, icmp_first_packet].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      super(attributes)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        NSXT.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = super
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end  end
end
