=begin
#NSX-T Manager API

#VMware NSX-T Manager REST API

OpenAPI spec version: 2.5.1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.25
=end

require 'date'

module NSXT
  # The deployment of a registered service. Service instance is instantiation of service. It is the most used type of instance. It is a default instance to be used when NSX handles lifecycle of appliance. Deployment and appliance related all the information is necessary.
  class ServiceInstance
    # Failure policy of the service instance - if it has to be different from the service. By default the service instance inherits the FailurePolicy of the service it belongs to.
    attr_accessor :on_failure_policy

    # Transport to be used by this service instance for deploying the Service-VM. This field is to be set Not Applicable(NA) if the service only caters to functionality EPP(Endpoint Protection).
    attr_accessor :transport_type

    # ServiceInstance is used when NSX handles the lifecyle of   appliance. Deployment and appliance related all the information is necessary. ByodServiceInstance is a custom instance to be used when NSX is not handling   the lifecycles of appliance/s. User will manage their own appliance (BYOD)   to connect with NSX. VirtualServiceInstance is a a custom instance to be used when NSX is not   handling the lifecycle of an appliance and when the user is not bringing   their own appliance. 
    attr_accessor :resource_type

    # The Service to which the service instance is associated.
    attr_accessor :service_id

    # Name of the deployment spec to be used by this service instance.
    attr_accessor :deployment_spec_name

    attr_accessor :instance_deployment_template

    # Implementation to be used by this service instance for deploying the Service-VM.
    attr_accessor :implementation_type

    # Attachment point to be used by this service instance for deploying the Service-VM.
    attr_accessor :attachment_point

    attr_accessor :instance_deployment_config

    # Deployment mode specifies where the partner appliance will be deployed in HA or non-HA i.e standalone mode.
    attr_accessor :deployment_mode

    # List of resource references where service instance be deployed. Ex. Tier 0 Logical Router in case of N-S ServiceInsertion.
    attr_accessor :deployed_to

    # Id of the Service Deployment using which the instances were deployed. Its available only for instances that were deployed using service deployment API.
    attr_accessor :service_deployment_id

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'on_failure_policy' => :'on_failure_policy',
        :'transport_type' => :'transport_type',
        :'resource_type' => :'resource_type',
        :'service_id' => :'service_id',
        :'deployment_spec_name' => :'deployment_spec_name',
        :'instance_deployment_template' => :'instance_deployment_template',
        :'implementation_type' => :'implementation_type',
        :'attachment_point' => :'attachment_point',
        :'instance_deployment_config' => :'instance_deployment_config',
        :'deployment_mode' => :'deployment_mode',
        :'deployed_to' => :'deployed_to',
        :'service_deployment_id' => :'service_deployment_id'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'on_failure_policy' => :'',
        :'transport_type' => :'',
        :'resource_type' => :'',
        :'service_id' => :'',
        :'deployment_spec_name' => :'',
        :'instance_deployment_template' => :'',
        :'implementation_type' => :'',
        :'attachment_point' => :'',
        :'instance_deployment_config' => :'',
        :'deployment_mode' => :'',
        :'deployed_to' => :'',
        :'service_deployment_id' => :''
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end
  
    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `NSXT::ServiceInstance` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `NSXT::ServiceInstance`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      # call parent's initialize
      super(attributes)

      if attributes.key?(:'on_failure_policy')
        self.on_failure_policy = attributes[:'on_failure_policy']
      end

      if attributes.key?(:'transport_type')
        self.transport_type = attributes[:'transport_type']
      end

      if attributes.key?(:'resource_type')
        self.resource_type = attributes[:'resource_type']
      end

      if attributes.key?(:'service_id')
        self.service_id = attributes[:'service_id']
      end

      if attributes.key?(:'deployment_spec_name')
        self.deployment_spec_name = attributes[:'deployment_spec_name']
      end

      if attributes.key?(:'instance_deployment_template')
        self.instance_deployment_template = attributes[:'instance_deployment_template']
      end

      if attributes.key?(:'implementation_type')
        self.implementation_type = attributes[:'implementation_type']
      end

      if attributes.key?(:'attachment_point')
        self.attachment_point = attributes[:'attachment_point']
      end

      if attributes.key?(:'instance_deployment_config')
        self.instance_deployment_config = attributes[:'instance_deployment_config']
      end

      if attributes.key?(:'deployment_mode')
        self.deployment_mode = attributes[:'deployment_mode']
      else
        self.deployment_mode = 'ACTIVE_STANDBY'
      end

      if attributes.key?(:'deployed_to')
        if (value = attributes[:'deployed_to']).is_a?(Array)
          self.deployed_to = value
        end
      end

      if attributes.key?(:'service_deployment_id')
        self.service_deployment_id = attributes[:'service_deployment_id']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = super
      if @transport_type.nil?
        invalid_properties.push('invalid value for "transport_type", transport_type cannot be nil.')
      end

      if @resource_type.nil?
        invalid_properties.push('invalid value for "resource_type", resource_type cannot be nil.')
      end

      if @deployment_spec_name.nil?
        invalid_properties.push('invalid value for "deployment_spec_name", deployment_spec_name cannot be nil.')
      end

      if @instance_deployment_template.nil?
        invalid_properties.push('invalid value for "instance_deployment_template", instance_deployment_template cannot be nil.')
      end

      if @implementation_type.nil?
        invalid_properties.push('invalid value for "implementation_type", implementation_type cannot be nil.')
      end

      if @attachment_point.nil?
        invalid_properties.push('invalid value for "attachment_point", attachment_point cannot be nil.')
      end

      if @deployment_mode.nil?
        invalid_properties.push('invalid value for "deployment_mode", deployment_mode cannot be nil.')
      end

      if @deployed_to.nil?
        invalid_properties.push('invalid value for "deployed_to", deployed_to cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      on_failure_policy_validator = EnumAttributeValidator.new('', ['ALLOW', 'BLOCK'])
      return false unless on_failure_policy_validator.valid?(@on_failure_policy)
      return false if @transport_type.nil?
      transport_type_validator = EnumAttributeValidator.new('', ['L2_BRIDGE', 'L3_ROUTED', 'NSH', 'NA'])
      return false unless transport_type_validator.valid?(@transport_type)
      return false if @resource_type.nil?
      resource_type_validator = EnumAttributeValidator.new('', ['ServiceInstance', 'ByodServiceInstance', 'VirtualServiceInstance'])
      return false unless resource_type_validator.valid?(@resource_type)
      return false if @deployment_spec_name.nil?
      return false if @instance_deployment_template.nil?
      return false if @implementation_type.nil?
      implementation_type_validator = EnumAttributeValidator.new('', ['NORTH_SOUTH', 'EAST_WEST'])
      return false unless implementation_type_validator.valid?(@implementation_type)
      return false if @attachment_point.nil?
      attachment_point_validator = EnumAttributeValidator.new('', ['TIER0_LR', 'TIER1_LR', 'SERVICE_PLANE', 'HOST'])
      return false unless attachment_point_validator.valid?(@attachment_point)
      return false if @deployment_mode.nil?
      deployment_mode_validator = EnumAttributeValidator.new('', ['STAND_ALONE', 'ACTIVE_STANDBY'])
      return false unless deployment_mode_validator.valid?(@deployment_mode)
      return false if @deployed_to.nil?
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] on_failure_policy Object to be assigned
    def on_failure_policy=(on_failure_policy)
      validator = EnumAttributeValidator.new('', ['ALLOW', 'BLOCK'])
      unless validator.valid?(on_failure_policy)
        fail ArgumentError, "invalid value for \"on_failure_policy\", must be one of #{validator.allowable_values}."
      end
      @on_failure_policy = on_failure_policy
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] transport_type Object to be assigned
    def transport_type=(transport_type)
      validator = EnumAttributeValidator.new('', ['L2_BRIDGE', 'L3_ROUTED', 'NSH', 'NA'])
      unless validator.valid?(transport_type)
        fail ArgumentError, "invalid value for \"transport_type\", must be one of #{validator.allowable_values}."
      end
      @transport_type = transport_type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] resource_type Object to be assigned
    def resource_type=(resource_type)
      validator = EnumAttributeValidator.new('', ['ServiceInstance', 'ByodServiceInstance', 'VirtualServiceInstance'])
      unless validator.valid?(resource_type)
        fail ArgumentError, "invalid value for \"resource_type\", must be one of #{validator.allowable_values}."
      end
      @resource_type = resource_type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] implementation_type Object to be assigned
    def implementation_type=(implementation_type)
      validator = EnumAttributeValidator.new('', ['NORTH_SOUTH', 'EAST_WEST'])
      unless validator.valid?(implementation_type)
        fail ArgumentError, "invalid value for \"implementation_type\", must be one of #{validator.allowable_values}."
      end
      @implementation_type = implementation_type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] attachment_point Object to be assigned
    def attachment_point=(attachment_point)
      validator = EnumAttributeValidator.new('', ['TIER0_LR', 'TIER1_LR', 'SERVICE_PLANE', 'HOST'])
      unless validator.valid?(attachment_point)
        fail ArgumentError, "invalid value for \"attachment_point\", must be one of #{validator.allowable_values}."
      end
      @attachment_point = attachment_point
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] deployment_mode Object to be assigned
    def deployment_mode=(deployment_mode)
      validator = EnumAttributeValidator.new('', ['STAND_ALONE', 'ACTIVE_STANDBY'])
      unless validator.valid?(deployment_mode)
        fail ArgumentError, "invalid value for \"deployment_mode\", must be one of #{validator.allowable_values}."
      end
      @deployment_mode = deployment_mode
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          on_failure_policy == o.on_failure_policy &&
          transport_type == o.transport_type &&
          resource_type == o.resource_type &&
          service_id == o.service_id &&
          deployment_spec_name == o.deployment_spec_name &&
          instance_deployment_template == o.instance_deployment_template &&
          implementation_type == o.implementation_type &&
          attachment_point == o.attachment_point &&
          instance_deployment_config == o.instance_deployment_config &&
          deployment_mode == o.deployment_mode &&
          deployed_to == o.deployed_to &&
          service_deployment_id == o.service_deployment_id && super(o)
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [on_failure_policy, transport_type, resource_type, service_id, deployment_spec_name, instance_deployment_template, implementation_type, attachment_point, instance_deployment_config, deployment_mode, deployed_to, service_deployment_id].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      super(attributes)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        NSXT.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = super
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end  end
end
