=begin
#NSX-T Manager API

#VMware NSX-T Manager REST API

OpenAPI spec version: 2.5.1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.25
=end

require 'date'

module NSXT
  # The configuration entity to define a NAT rule. It defines how an ip packet is matched via source address or/and destination address or/and service(s), how the address (and/or) port is translated, and how the related firewall stage is involved or bypassed. 
  class NatRule
    # Indicates system owned resource
    attr_accessor :_system_owned

    # Defaults to ID if not set
    attr_accessor :display_name

    # Description of this resource
    attr_accessor :description

    # Opaque identifiers meaningful to the API user
    attr_accessor :tags

    # ID of the user who created this resource
    attr_accessor :_create_user

    # Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed             to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed                 to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super                    user and can modify it, but only when providing                    the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this           entity. 
    attr_accessor :_protection

    # Timestamp of resource creation
    attr_accessor :_create_time

    # Timestamp of last modification
    attr_accessor :_last_modified_time

    # ID of the user who last modified this resource
    attr_accessor :_last_modified_user

    # Unique identifier of this resource
    attr_accessor :id

    # The type of this resource.
    attr_accessor :resource_type

    # IP Address | CIDR | (null implies Any) 
    attr_accessor :match_destination_network

    # The translated address for the matched IP packet. For a SNAT, it can be a single ip address, an ip range, or a CIDR block. For a DNAT and a REFLEXIVE, it can be a single ip address or a CIDR block. Translated network is not supported for NO_SNAT or NO_DNAT. 
    attr_accessor :translated_network

    # Ascending, valid range [0-2147483647]. If multiple rules have the same priority, evaluation sequence is undefined. 
    attr_accessor :rule_priority

    attr_accessor :match_service

    # Holds the list of LogicalRouterPort Ids that a NAT rule can be applied to. The LogicalRouterPort used must belong to the same LogicalRouter for which the NAT Rule is created. As of now a NAT rule can only have a single LogicalRouterPort as applied_tos. When applied_tos is not set, the NAT rule is applied to all LogicalRouterPorts beloging to the LogicalRouter.
    attr_accessor :applied_tos

    # Indicator to enable/disable the rule. 
    attr_accessor :enabled

    # Internal NAT rule uuid for debug used in Controller and backend.
    attr_accessor :internal_rule_id

    # Enable/disable the logging of rule. 
    attr_accessor :logging

    # The translated port(s) for the mtached IP packet. It can be a single port or a port range. Please note, port translating is supported only for DNAT. 
    attr_accessor :translated_ports

    # Valid actions: SNAT, DNAT, NO_SNAT, NO_DNAT, REFLEXIVE. All rules in a logical router are either stateless or stateful. Mix is not supported. SNAT and DNAT are stateful, can NOT be supported when the logical router is running at active-active HA mode; REFLEXIVE is stateless. NO_SNAT and NO_DNAT have no translated_fields, only match fields are supported. 
    attr_accessor :action

    # Indicate how firewall is applied to a traffic packet. Firewall can be bypassed, or be applied to external/internal address of NAT rule.  The firewall_match will take priority over nat_pass. If the firewall_match is not provided, the nat_pass will be picked up. 
    attr_accessor :firewall_match

    # Default is true. If the nat_pass is set to true, the following firewall stage will be skipped. Please note, if action is NO_SNAT or NO_DNAT, then nat_pass must be set to true or omitted.  Nat_pass was deprecated with an alternative firewall_match. Please stop using nat_pass to specify whether firewall stage is skipped. if you want to skip, please set firewall_match to BYPASS. If you do not want to skip, please set the firewall_match to MATCH_EXTERNAL_ADDRESS or MATCH_INTERNAL_ADDRESS.  Please note, the firewall_match will take priority over the nat_pass. If both are provided, the nat_pass is ignored. If firewall_match is not provided while the nat_pass is specified, the nat_pass will still be picked up. In this case, if nat_pass is set to false, firewall rule will be applied on internall address of a packet, i.e. MATCH_INTERNAL_ADDRESS. 
    attr_accessor :nat_pass

    # The logical router id which the nat rule runs on.
    attr_accessor :logical_router_id

    # IP Address | CIDR | (null implies Any) 
    attr_accessor :match_source_network

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'_system_owned' => :'_system_owned',
        :'display_name' => :'display_name',
        :'description' => :'description',
        :'tags' => :'tags',
        :'_create_user' => :'_create_user',
        :'_protection' => :'_protection',
        :'_create_time' => :'_create_time',
        :'_last_modified_time' => :'_last_modified_time',
        :'_last_modified_user' => :'_last_modified_user',
        :'id' => :'id',
        :'resource_type' => :'resource_type',
        :'match_destination_network' => :'match_destination_network',
        :'translated_network' => :'translated_network',
        :'rule_priority' => :'rule_priority',
        :'match_service' => :'match_service',
        :'applied_tos' => :'applied_tos',
        :'enabled' => :'enabled',
        :'internal_rule_id' => :'internal_rule_id',
        :'logging' => :'logging',
        :'translated_ports' => :'translated_ports',
        :'action' => :'action',
        :'firewall_match' => :'firewall_match',
        :'nat_pass' => :'nat_pass',
        :'logical_router_id' => :'logical_router_id',
        :'match_source_network' => :'match_source_network'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'_system_owned' => :'',
        :'display_name' => :'',
        :'description' => :'',
        :'tags' => :'',
        :'_create_user' => :'',
        :'_protection' => :'',
        :'_create_time' => :'',
        :'_last_modified_time' => :'',
        :'_last_modified_user' => :'',
        :'id' => :'',
        :'resource_type' => :'',
        :'match_destination_network' => :'',
        :'translated_network' => :'',
        :'rule_priority' => :'',
        :'match_service' => :'',
        :'applied_tos' => :'',
        :'enabled' => :'',
        :'internal_rule_id' => :'',
        :'logging' => :'',
        :'translated_ports' => :'',
        :'action' => :'',
        :'firewall_match' => :'',
        :'nat_pass' => :'',
        :'logical_router_id' => :'',
        :'match_source_network' => :''
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end
  
    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `NSXT::NatRule` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `NSXT::NatRule`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      # call parent's initialize
      super(attributes)

      if attributes.key?(:'_system_owned')
        self._system_owned = attributes[:'_system_owned']
      end

      if attributes.key?(:'display_name')
        self.display_name = attributes[:'display_name']
      end

      if attributes.key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.key?(:'tags')
        if (value = attributes[:'tags']).is_a?(Array)
          self.tags = value
        end
      end

      if attributes.key?(:'_create_user')
        self._create_user = attributes[:'_create_user']
      end

      if attributes.key?(:'_protection')
        self._protection = attributes[:'_protection']
      end

      if attributes.key?(:'_create_time')
        self._create_time = attributes[:'_create_time']
      end

      if attributes.key?(:'_last_modified_time')
        self._last_modified_time = attributes[:'_last_modified_time']
      end

      if attributes.key?(:'_last_modified_user')
        self._last_modified_user = attributes[:'_last_modified_user']
      end

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'resource_type')
        self.resource_type = attributes[:'resource_type']
      end

      if attributes.key?(:'match_destination_network')
        self.match_destination_network = attributes[:'match_destination_network']
      end

      if attributes.key?(:'translated_network')
        self.translated_network = attributes[:'translated_network']
      end

      if attributes.key?(:'rule_priority')
        self.rule_priority = attributes[:'rule_priority']
      else
        self.rule_priority = 1024
      end

      if attributes.key?(:'match_service')
        self.match_service = attributes[:'match_service']
      end

      if attributes.key?(:'applied_tos')
        if (value = attributes[:'applied_tos']).is_a?(Array)
          self.applied_tos = value
        end
      end

      if attributes.key?(:'enabled')
        self.enabled = attributes[:'enabled']
      else
        self.enabled = true
      end

      if attributes.key?(:'internal_rule_id')
        self.internal_rule_id = attributes[:'internal_rule_id']
      end

      if attributes.key?(:'logging')
        self.logging = attributes[:'logging']
      else
        self.logging = false
      end

      if attributes.key?(:'translated_ports')
        self.translated_ports = attributes[:'translated_ports']
      end

      if attributes.key?(:'action')
        self.action = attributes[:'action']
      end

      if attributes.key?(:'firewall_match')
        self.firewall_match = attributes[:'firewall_match']
      end

      if attributes.key?(:'nat_pass')
        self.nat_pass = attributes[:'nat_pass']
      else
        self.nat_pass = true
      end

      if attributes.key?(:'logical_router_id')
        self.logical_router_id = attributes[:'logical_router_id']
      end

      if attributes.key?(:'match_source_network')
        self.match_source_network = attributes[:'match_source_network']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = super
      if @action.nil?
        invalid_properties.push('invalid value for "action", action cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @action.nil?
      action_validator = EnumAttributeValidator.new('', ['SNAT', 'DNAT', 'NO_NAT', 'REFLEXIVE', 'NO_SNAT', 'NO_DNAT'])
      return false unless action_validator.valid?(@action)
      firewall_match_validator = EnumAttributeValidator.new('', ['MATCH_EXTERNAL_ADDRESS', 'MATCH_INTERNAL_ADDRESS', 'BYPASS'])
      return false unless firewall_match_validator.valid?(@firewall_match)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] action Object to be assigned
    def action=(action)
      validator = EnumAttributeValidator.new('', ['SNAT', 'DNAT', 'NO_NAT', 'REFLEXIVE', 'NO_SNAT', 'NO_DNAT'])
      unless validator.valid?(action)
        fail ArgumentError, "invalid value for \"action\", must be one of #{validator.allowable_values}."
      end
      @action = action
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] firewall_match Object to be assigned
    def firewall_match=(firewall_match)
      validator = EnumAttributeValidator.new('', ['MATCH_EXTERNAL_ADDRESS', 'MATCH_INTERNAL_ADDRESS', 'BYPASS'])
      unless validator.valid?(firewall_match)
        fail ArgumentError, "invalid value for \"firewall_match\", must be one of #{validator.allowable_values}."
      end
      @firewall_match = firewall_match
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          _system_owned == o._system_owned &&
          display_name == o.display_name &&
          description == o.description &&
          tags == o.tags &&
          _create_user == o._create_user &&
          _protection == o._protection &&
          _create_time == o._create_time &&
          _last_modified_time == o._last_modified_time &&
          _last_modified_user == o._last_modified_user &&
          id == o.id &&
          resource_type == o.resource_type &&
          match_destination_network == o.match_destination_network &&
          translated_network == o.translated_network &&
          rule_priority == o.rule_priority &&
          match_service == o.match_service &&
          applied_tos == o.applied_tos &&
          enabled == o.enabled &&
          internal_rule_id == o.internal_rule_id &&
          logging == o.logging &&
          translated_ports == o.translated_ports &&
          action == o.action &&
          firewall_match == o.firewall_match &&
          nat_pass == o.nat_pass &&
          logical_router_id == o.logical_router_id &&
          match_source_network == o.match_source_network && super(o)
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [_system_owned, display_name, description, tags, _create_user, _protection, _create_time, _last_modified_time, _last_modified_user, id, resource_type, match_destination_network, translated_network, rule_priority, match_service, applied_tos, enabled, internal_rule_id, logging, translated_ports, action, firewall_match, nat_pass, logical_router_id, match_source_network].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      super(attributes)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        NSXT.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = super
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end  end
end
