=begin
#NSX-T Manager API

#VMware NSX-T Manager REST API

OpenAPI spec version: 2.5.1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.25
=end

module NSXT
  class ManagementPlaneApiServicesLoadbalancerApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create a load balancer application profile
    # Create a load balancer application profile. 
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [LbAppProfile]
    def create_load_balancer_application_profile(body, opts = {})
      data, _status_code, _headers = create_load_balancer_application_profile_with_http_info(body, opts)
      data
    end

    # Create a load balancer application profile
    # Create a load balancer application profile. 
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(LbAppProfile, Integer, Hash)>] LbAppProfile data, response status code and response headers
    def create_load_balancer_application_profile_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesLoadbalancerApi.create_load_balancer_application_profile ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ManagementPlaneApiServicesLoadbalancerApi.create_load_balancer_application_profile"
      end
      # resource path
      local_var_path = '/loadbalancer/application-profiles'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'LbAppProfile' 

      auth_names = opts[:auth_names] || ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesLoadbalancerApi#create_load_balancer_application_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a load balancer client-ssl profile
    # Create a load balancer client-ssl profile. 
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [LbClientSslProfile]
    def create_load_balancer_client_ssl_profile(body, opts = {})
      data, _status_code, _headers = create_load_balancer_client_ssl_profile_with_http_info(body, opts)
      data
    end

    # Create a load balancer client-ssl profile
    # Create a load balancer client-ssl profile. 
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(LbClientSslProfile, Integer, Hash)>] LbClientSslProfile data, response status code and response headers
    def create_load_balancer_client_ssl_profile_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesLoadbalancerApi.create_load_balancer_client_ssl_profile ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ManagementPlaneApiServicesLoadbalancerApi.create_load_balancer_client_ssl_profile"
      end
      # resource path
      local_var_path = '/loadbalancer/client-ssl-profiles'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'LbClientSslProfile' 

      auth_names = opts[:auth_names] || ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesLoadbalancerApi#create_load_balancer_client_ssl_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a load balancer monitor
    # Create a load balancer monitor. 
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [LbMonitor]
    def create_load_balancer_monitor(body, opts = {})
      data, _status_code, _headers = create_load_balancer_monitor_with_http_info(body, opts)
      data
    end

    # Create a load balancer monitor
    # Create a load balancer monitor. 
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(LbMonitor, Integer, Hash)>] LbMonitor data, response status code and response headers
    def create_load_balancer_monitor_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesLoadbalancerApi.create_load_balancer_monitor ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ManagementPlaneApiServicesLoadbalancerApi.create_load_balancer_monitor"
      end
      # resource path
      local_var_path = '/loadbalancer/monitors'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'LbMonitor' 

      auth_names = opts[:auth_names] || ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesLoadbalancerApi#create_load_balancer_monitor\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a load balancer persistence profile
    # Create a load balancer persistence profile. 
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [LbPersistenceProfile]
    def create_load_balancer_persistence_profile(body, opts = {})
      data, _status_code, _headers = create_load_balancer_persistence_profile_with_http_info(body, opts)
      data
    end

    # Create a load balancer persistence profile
    # Create a load balancer persistence profile. 
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(LbPersistenceProfile, Integer, Hash)>] LbPersistenceProfile data, response status code and response headers
    def create_load_balancer_persistence_profile_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesLoadbalancerApi.create_load_balancer_persistence_profile ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ManagementPlaneApiServicesLoadbalancerApi.create_load_balancer_persistence_profile"
      end
      # resource path
      local_var_path = '/loadbalancer/persistence-profiles'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'LbPersistenceProfile' 

      auth_names = opts[:auth_names] || ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesLoadbalancerApi#create_load_balancer_persistence_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a load balancer pool
    # Create a load balancer pool. 
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [LbPool]
    def create_load_balancer_pool(body, opts = {})
      data, _status_code, _headers = create_load_balancer_pool_with_http_info(body, opts)
      data
    end

    # Create a load balancer pool
    # Create a load balancer pool. 
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(LbPool, Integer, Hash)>] LbPool data, response status code and response headers
    def create_load_balancer_pool_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesLoadbalancerApi.create_load_balancer_pool ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ManagementPlaneApiServicesLoadbalancerApi.create_load_balancer_pool"
      end
      # resource path
      local_var_path = '/loadbalancer/pools'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'LbPool' 

      auth_names = opts[:auth_names] || ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesLoadbalancerApi#create_load_balancer_pool\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a load balancer rule
    # Create a load balancer rule. 
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [LbRule]
    def create_load_balancer_rule(body, opts = {})
      data, _status_code, _headers = create_load_balancer_rule_with_http_info(body, opts)
      data
    end

    # Create a load balancer rule
    # Create a load balancer rule. 
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(LbRule, Integer, Hash)>] LbRule data, response status code and response headers
    def create_load_balancer_rule_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesLoadbalancerApi.create_load_balancer_rule ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ManagementPlaneApiServicesLoadbalancerApi.create_load_balancer_rule"
      end
      # resource path
      local_var_path = '/loadbalancer/rules'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'LbRule' 

      auth_names = opts[:auth_names] || ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesLoadbalancerApi#create_load_balancer_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a load balancer server-ssl profile
    # Create a load balancer server-ssl profile. 
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [LbServerSslProfile]
    def create_load_balancer_server_ssl_profile(body, opts = {})
      data, _status_code, _headers = create_load_balancer_server_ssl_profile_with_http_info(body, opts)
      data
    end

    # Create a load balancer server-ssl profile
    # Create a load balancer server-ssl profile. 
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(LbServerSslProfile, Integer, Hash)>] LbServerSslProfile data, response status code and response headers
    def create_load_balancer_server_ssl_profile_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesLoadbalancerApi.create_load_balancer_server_ssl_profile ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ManagementPlaneApiServicesLoadbalancerApi.create_load_balancer_server_ssl_profile"
      end
      # resource path
      local_var_path = '/loadbalancer/server-ssl-profiles'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'LbServerSslProfile' 

      auth_names = opts[:auth_names] || ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesLoadbalancerApi#create_load_balancer_server_ssl_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a load balancer service
    # Create a load balancer service. 
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [LbService]
    def create_load_balancer_service(body, opts = {})
      data, _status_code, _headers = create_load_balancer_service_with_http_info(body, opts)
      data
    end

    # Create a load balancer service
    # Create a load balancer service. 
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(LbService, Integer, Hash)>] LbService data, response status code and response headers
    def create_load_balancer_service_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesLoadbalancerApi.create_load_balancer_service ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ManagementPlaneApiServicesLoadbalancerApi.create_load_balancer_service"
      end
      # resource path
      local_var_path = '/loadbalancer/services'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'LbService' 

      auth_names = opts[:auth_names] || ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesLoadbalancerApi#create_load_balancer_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a load balancer TCP profile
    # Create a load balancer TCP profile. 
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [LbTcpProfile]
    def create_load_balancer_tcp_profile(body, opts = {})
      data, _status_code, _headers = create_load_balancer_tcp_profile_with_http_info(body, opts)
      data
    end

    # Create a load balancer TCP profile
    # Create a load balancer TCP profile. 
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(LbTcpProfile, Integer, Hash)>] LbTcpProfile data, response status code and response headers
    def create_load_balancer_tcp_profile_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesLoadbalancerApi.create_load_balancer_tcp_profile ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ManagementPlaneApiServicesLoadbalancerApi.create_load_balancer_tcp_profile"
      end
      # resource path
      local_var_path = '/loadbalancer/tcp-profiles'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'LbTcpProfile' 

      auth_names = opts[:auth_names] || ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesLoadbalancerApi#create_load_balancer_tcp_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a load balancer virtual server
    # Create a load balancer virtual server. 
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [LbVirtualServer]
    def create_load_balancer_virtual_server(body, opts = {})
      data, _status_code, _headers = create_load_balancer_virtual_server_with_http_info(body, opts)
      data
    end

    # Create a load balancer virtual server
    # Create a load balancer virtual server. 
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(LbVirtualServer, Integer, Hash)>] LbVirtualServer data, response status code and response headers
    def create_load_balancer_virtual_server_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesLoadbalancerApi.create_load_balancer_virtual_server ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ManagementPlaneApiServicesLoadbalancerApi.create_load_balancer_virtual_server"
      end
      # resource path
      local_var_path = '/loadbalancer/virtual-servers'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'LbVirtualServer' 

      auth_names = opts[:auth_names] || ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesLoadbalancerApi#create_load_balancer_virtual_server\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a load balancer virtual server with rules
    # It is used to create virtual servers, the associated rules and bind the rules to the virtual server. To add new rules, make sure the rules which have no identifier specified, the new rules are automatically generated and associated to the virtual server. If the virtual server need to consume some existed rules without change, those rules should not be specified in this array, otherwise, the rules are updated. 
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [LbVirtualServerWithRule]
    def create_load_balancer_virtual_server_with_rules_create_with_rules(body, opts = {})
      data, _status_code, _headers = create_load_balancer_virtual_server_with_rules_create_with_rules_with_http_info(body, opts)
      data
    end

    # Create a load balancer virtual server with rules
    # It is used to create virtual servers, the associated rules and bind the rules to the virtual server. To add new rules, make sure the rules which have no identifier specified, the new rules are automatically generated and associated to the virtual server. If the virtual server need to consume some existed rules without change, those rules should not be specified in this array, otherwise, the rules are updated. 
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(LbVirtualServerWithRule, Integer, Hash)>] LbVirtualServerWithRule data, response status code and response headers
    def create_load_balancer_virtual_server_with_rules_create_with_rules_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesLoadbalancerApi.create_load_balancer_virtual_server_with_rules_create_with_rules ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ManagementPlaneApiServicesLoadbalancerApi.create_load_balancer_virtual_server_with_rules_create_with_rules"
      end
      # resource path
      local_var_path = '/loadbalancer/virtual-servers?action=create_with_rules'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'LbVirtualServerWithRule' 

      auth_names = opts[:auth_names] || ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesLoadbalancerApi#create_load_balancer_virtual_server_with_rules_create_with_rules\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a load balancer application profile
    # Delete a load balancer application profile. 
    # @param application_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_load_balancer_application_profile(application_profile_id, opts = {})
      delete_load_balancer_application_profile_with_http_info(application_profile_id, opts)
      nil
    end

    # Delete a load balancer application profile
    # Delete a load balancer application profile. 
    # @param application_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_load_balancer_application_profile_with_http_info(application_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesLoadbalancerApi.delete_load_balancer_application_profile ...'
      end
      # verify the required parameter 'application_profile_id' is set
      if @api_client.config.client_side_validation && application_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'application_profile_id' when calling ManagementPlaneApiServicesLoadbalancerApi.delete_load_balancer_application_profile"
      end
      # resource path
      local_var_path = '/loadbalancer/application-profiles/{application-profile-id}'.sub('{' + 'application-profile-id' + '}', application_profile_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesLoadbalancerApi#delete_load_balancer_application_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a load balancer client-ssl profile
    # Delete a load balancer client-ssl profile. 
    # @param client_ssl_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_load_balancer_client_ssl_profile(client_ssl_profile_id, opts = {})
      delete_load_balancer_client_ssl_profile_with_http_info(client_ssl_profile_id, opts)
      nil
    end

    # Delete a load balancer client-ssl profile
    # Delete a load balancer client-ssl profile. 
    # @param client_ssl_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_load_balancer_client_ssl_profile_with_http_info(client_ssl_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesLoadbalancerApi.delete_load_balancer_client_ssl_profile ...'
      end
      # verify the required parameter 'client_ssl_profile_id' is set
      if @api_client.config.client_side_validation && client_ssl_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_ssl_profile_id' when calling ManagementPlaneApiServicesLoadbalancerApi.delete_load_balancer_client_ssl_profile"
      end
      # resource path
      local_var_path = '/loadbalancer/client-ssl-profiles/{client-ssl-profile-id}'.sub('{' + 'client-ssl-profile-id' + '}', client_ssl_profile_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesLoadbalancerApi#delete_load_balancer_client_ssl_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a load balancer monitor
    # Delete a load balancer monitor. 
    # @param monitor_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_load_balancer_monitor(monitor_id, opts = {})
      delete_load_balancer_monitor_with_http_info(monitor_id, opts)
      nil
    end

    # Delete a load balancer monitor
    # Delete a load balancer monitor. 
    # @param monitor_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_load_balancer_monitor_with_http_info(monitor_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesLoadbalancerApi.delete_load_balancer_monitor ...'
      end
      # verify the required parameter 'monitor_id' is set
      if @api_client.config.client_side_validation && monitor_id.nil?
        fail ArgumentError, "Missing the required parameter 'monitor_id' when calling ManagementPlaneApiServicesLoadbalancerApi.delete_load_balancer_monitor"
      end
      # resource path
      local_var_path = '/loadbalancer/monitors/{monitor-id}'.sub('{' + 'monitor-id' + '}', monitor_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesLoadbalancerApi#delete_load_balancer_monitor\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a load balancer persistence profile
    # Delete a load balancer persistence profile. 
    # @param persistence_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_load_balancer_persistence_profile(persistence_profile_id, opts = {})
      delete_load_balancer_persistence_profile_with_http_info(persistence_profile_id, opts)
      nil
    end

    # Delete a load balancer persistence profile
    # Delete a load balancer persistence profile. 
    # @param persistence_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_load_balancer_persistence_profile_with_http_info(persistence_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesLoadbalancerApi.delete_load_balancer_persistence_profile ...'
      end
      # verify the required parameter 'persistence_profile_id' is set
      if @api_client.config.client_side_validation && persistence_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'persistence_profile_id' when calling ManagementPlaneApiServicesLoadbalancerApi.delete_load_balancer_persistence_profile"
      end
      # resource path
      local_var_path = '/loadbalancer/persistence-profiles/{persistence-profile-id}'.sub('{' + 'persistence-profile-id' + '}', persistence_profile_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesLoadbalancerApi#delete_load_balancer_persistence_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a load balancer pool
    # Delete a load balancer pool. 
    # @param pool_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_load_balancer_pool(pool_id, opts = {})
      delete_load_balancer_pool_with_http_info(pool_id, opts)
      nil
    end

    # Delete a load balancer pool
    # Delete a load balancer pool. 
    # @param pool_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_load_balancer_pool_with_http_info(pool_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesLoadbalancerApi.delete_load_balancer_pool ...'
      end
      # verify the required parameter 'pool_id' is set
      if @api_client.config.client_side_validation && pool_id.nil?
        fail ArgumentError, "Missing the required parameter 'pool_id' when calling ManagementPlaneApiServicesLoadbalancerApi.delete_load_balancer_pool"
      end
      # resource path
      local_var_path = '/loadbalancer/pools/{pool-id}'.sub('{' + 'pool-id' + '}', pool_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesLoadbalancerApi#delete_load_balancer_pool\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a load balancer rule
    # Delete a load balancer rule. 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_load_balancer_rule(rule_id, opts = {})
      delete_load_balancer_rule_with_http_info(rule_id, opts)
      nil
    end

    # Delete a load balancer rule
    # Delete a load balancer rule. 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_load_balancer_rule_with_http_info(rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesLoadbalancerApi.delete_load_balancer_rule ...'
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling ManagementPlaneApiServicesLoadbalancerApi.delete_load_balancer_rule"
      end
      # resource path
      local_var_path = '/loadbalancer/rules/{rule-id}'.sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesLoadbalancerApi#delete_load_balancer_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a load balancer server-ssl profile
    # Delete a load balancer server-ssl profile. 
    # @param server_ssl_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_load_balancer_server_ssl_profile(server_ssl_profile_id, opts = {})
      delete_load_balancer_server_ssl_profile_with_http_info(server_ssl_profile_id, opts)
      nil
    end

    # Delete a load balancer server-ssl profile
    # Delete a load balancer server-ssl profile. 
    # @param server_ssl_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_load_balancer_server_ssl_profile_with_http_info(server_ssl_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesLoadbalancerApi.delete_load_balancer_server_ssl_profile ...'
      end
      # verify the required parameter 'server_ssl_profile_id' is set
      if @api_client.config.client_side_validation && server_ssl_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'server_ssl_profile_id' when calling ManagementPlaneApiServicesLoadbalancerApi.delete_load_balancer_server_ssl_profile"
      end
      # resource path
      local_var_path = '/loadbalancer/server-ssl-profiles/{server-ssl-profile-id}'.sub('{' + 'server-ssl-profile-id' + '}', server_ssl_profile_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesLoadbalancerApi#delete_load_balancer_server_ssl_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a load balancer service
    # Delete a load balancer service. 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_load_balancer_service(service_id, opts = {})
      delete_load_balancer_service_with_http_info(service_id, opts)
      nil
    end

    # Delete a load balancer service
    # Delete a load balancer service. 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_load_balancer_service_with_http_info(service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesLoadbalancerApi.delete_load_balancer_service ...'
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling ManagementPlaneApiServicesLoadbalancerApi.delete_load_balancer_service"
      end
      # resource path
      local_var_path = '/loadbalancer/services/{service-id}'.sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesLoadbalancerApi#delete_load_balancer_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a load balancer TCP profile
    # Delete a load balancer TCP profile. 
    # @param tcp_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_load_balancer_tcp_profile(tcp_profile_id, opts = {})
      delete_load_balancer_tcp_profile_with_http_info(tcp_profile_id, opts)
      nil
    end

    # Delete a load balancer TCP profile
    # Delete a load balancer TCP profile. 
    # @param tcp_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_load_balancer_tcp_profile_with_http_info(tcp_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesLoadbalancerApi.delete_load_balancer_tcp_profile ...'
      end
      # verify the required parameter 'tcp_profile_id' is set
      if @api_client.config.client_side_validation && tcp_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'tcp_profile_id' when calling ManagementPlaneApiServicesLoadbalancerApi.delete_load_balancer_tcp_profile"
      end
      # resource path
      local_var_path = '/loadbalancer/tcp-profiles/{tcp-profile-id}'.sub('{' + 'tcp-profile-id' + '}', tcp_profile_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesLoadbalancerApi#delete_load_balancer_tcp_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a load balancer virtual server
    # Delete a load balancer virtual server. 
    # @param virtual_server_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :delete_associated_rules Delete associated rules (default to false)
    # @return [nil]
    def delete_load_balancer_virtual_server(virtual_server_id, opts = {})
      delete_load_balancer_virtual_server_with_http_info(virtual_server_id, opts)
      nil
    end

    # Delete a load balancer virtual server
    # Delete a load balancer virtual server. 
    # @param virtual_server_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :delete_associated_rules Delete associated rules
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_load_balancer_virtual_server_with_http_info(virtual_server_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesLoadbalancerApi.delete_load_balancer_virtual_server ...'
      end
      # verify the required parameter 'virtual_server_id' is set
      if @api_client.config.client_side_validation && virtual_server_id.nil?
        fail ArgumentError, "Missing the required parameter 'virtual_server_id' when calling ManagementPlaneApiServicesLoadbalancerApi.delete_load_balancer_virtual_server"
      end
      # resource path
      local_var_path = '/loadbalancer/virtual-servers/{virtual-server-id}'.sub('{' + 'virtual-server-id' + '}', virtual_server_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'delete_associated_rules'] = opts[:'delete_associated_rules'] if !opts[:'delete_associated_rules'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesLoadbalancerApi#delete_load_balancer_virtual_server\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the statistics of load balancer pool
    # Returns the statistics of the given load balancer pool by given load balancer serives id and load balancer pool id. Currently, only realtime mode is supported. 
    # @param service_id 
    # @param pool_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :source Data source type.
    # @return [LbPoolStatistics]
    def get_load_balancer_pool_statistics(service_id, pool_id, opts = {})
      data, _status_code, _headers = get_load_balancer_pool_statistics_with_http_info(service_id, pool_id, opts)
      data
    end

    # Get the statistics of load balancer pool
    # Returns the statistics of the given load balancer pool by given load balancer serives id and load balancer pool id. Currently, only realtime mode is supported. 
    # @param service_id 
    # @param pool_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :source Data source type.
    # @return [Array<(LbPoolStatistics, Integer, Hash)>] LbPoolStatistics data, response status code and response headers
    def get_load_balancer_pool_statistics_with_http_info(service_id, pool_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesLoadbalancerApi.get_load_balancer_pool_statistics ...'
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling ManagementPlaneApiServicesLoadbalancerApi.get_load_balancer_pool_statistics"
      end
      # verify the required parameter 'pool_id' is set
      if @api_client.config.client_side_validation && pool_id.nil?
        fail ArgumentError, "Missing the required parameter 'pool_id' when calling ManagementPlaneApiServicesLoadbalancerApi.get_load_balancer_pool_statistics"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/loadbalancer/services/{service-id}/pools/{pool-id}/statistics'.sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'pool-id' + '}', pool_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'LbPoolStatistics' 

      auth_names = opts[:auth_names] || ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesLoadbalancerApi#get_load_balancer_pool_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the status of load balancer pool
    # Returns the status of the given load balancer pool by given load balancer serives id and load balancer pool id. 
    # @param service_id 
    # @param pool_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :source Data source type.
    # @return [LbPoolStatus]
    def get_load_balancer_pool_status(service_id, pool_id, opts = {})
      data, _status_code, _headers = get_load_balancer_pool_status_with_http_info(service_id, pool_id, opts)
      data
    end

    # Get the status of load balancer pool
    # Returns the status of the given load balancer pool by given load balancer serives id and load balancer pool id. 
    # @param service_id 
    # @param pool_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :source Data source type.
    # @return [Array<(LbPoolStatus, Integer, Hash)>] LbPoolStatus data, response status code and response headers
    def get_load_balancer_pool_status_with_http_info(service_id, pool_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesLoadbalancerApi.get_load_balancer_pool_status ...'
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling ManagementPlaneApiServicesLoadbalancerApi.get_load_balancer_pool_status"
      end
      # verify the required parameter 'pool_id' is set
      if @api_client.config.client_side_validation && pool_id.nil?
        fail ArgumentError, "Missing the required parameter 'pool_id' when calling ManagementPlaneApiServicesLoadbalancerApi.get_load_balancer_pool_status"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/loadbalancer/services/{service-id}/pools/{pool-id}/status'.sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'pool-id' + '}', pool_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'LbPoolStatus' 

      auth_names = opts[:auth_names] || ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesLoadbalancerApi#get_load_balancer_pool_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the statistics of load balancer service
    # Returns the statistics of the given load balancer service. 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :source Data source type.
    # @return [LbServiceStatistics]
    def get_load_balancer_service_statistics(service_id, opts = {})
      data, _status_code, _headers = get_load_balancer_service_statistics_with_http_info(service_id, opts)
      data
    end

    # Get the statistics of load balancer service
    # Returns the statistics of the given load balancer service. 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :source Data source type.
    # @return [Array<(LbServiceStatistics, Integer, Hash)>] LbServiceStatistics data, response status code and response headers
    def get_load_balancer_service_statistics_with_http_info(service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesLoadbalancerApi.get_load_balancer_service_statistics ...'
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling ManagementPlaneApiServicesLoadbalancerApi.get_load_balancer_service_statistics"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/loadbalancer/services/{service-id}/statistics'.sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'LbServiceStatistics' 

      auth_names = opts[:auth_names] || ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesLoadbalancerApi#get_load_balancer_service_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the status of the given load balancer service
    # Returns the status of the given load balancer service. 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :source Data source type.
    # @return [LbServiceStatus]
    def get_load_balancer_service_status(service_id, opts = {})
      data, _status_code, _headers = get_load_balancer_service_status_with_http_info(service_id, opts)
      data
    end

    # Get the status of the given load balancer service
    # Returns the status of the given load balancer service. 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :source Data source type.
    # @return [Array<(LbServiceStatus, Integer, Hash)>] LbServiceStatus data, response status code and response headers
    def get_load_balancer_service_status_with_http_info(service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesLoadbalancerApi.get_load_balancer_service_status ...'
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling ManagementPlaneApiServicesLoadbalancerApi.get_load_balancer_service_status"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/loadbalancer/services/{service-id}/status'.sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'LbServiceStatus' 

      auth_names = opts[:auth_names] || ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesLoadbalancerApi#get_load_balancer_service_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the statistics of the given load balancer virtual server
    # Returns the statistics of the load balancer virtual server by given load  balancer serives id and load balancer virtual server id. 
    # @param service_id 
    # @param virtual_server_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :source Data source type.
    # @return [LbVirtualServerStatistics]
    def get_load_balancer_virtual_server_statistics(service_id, virtual_server_id, opts = {})
      data, _status_code, _headers = get_load_balancer_virtual_server_statistics_with_http_info(service_id, virtual_server_id, opts)
      data
    end

    # Get the statistics of the given load balancer virtual server
    # Returns the statistics of the load balancer virtual server by given load  balancer serives id and load balancer virtual server id. 
    # @param service_id 
    # @param virtual_server_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :source Data source type.
    # @return [Array<(LbVirtualServerStatistics, Integer, Hash)>] LbVirtualServerStatistics data, response status code and response headers
    def get_load_balancer_virtual_server_statistics_with_http_info(service_id, virtual_server_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesLoadbalancerApi.get_load_balancer_virtual_server_statistics ...'
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling ManagementPlaneApiServicesLoadbalancerApi.get_load_balancer_virtual_server_statistics"
      end
      # verify the required parameter 'virtual_server_id' is set
      if @api_client.config.client_side_validation && virtual_server_id.nil?
        fail ArgumentError, "Missing the required parameter 'virtual_server_id' when calling ManagementPlaneApiServicesLoadbalancerApi.get_load_balancer_virtual_server_statistics"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/loadbalancer/services/{service-id}/virtual-servers/{virtual-server-id}/statistics'.sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'virtual-server-id' + '}', virtual_server_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'LbVirtualServerStatistics' 

      auth_names = opts[:auth_names] || ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesLoadbalancerApi#get_load_balancer_virtual_server_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the status of the load balancer virtual server
    # Returns the status of the virtual server by given load balancer serives id and load balancer virtual server id. 
    # @param service_id 
    # @param virtual_server_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :source Data source type.
    # @return [LbVirtualServerStatus]
    def get_load_balancer_virtual_server_status(service_id, virtual_server_id, opts = {})
      data, _status_code, _headers = get_load_balancer_virtual_server_status_with_http_info(service_id, virtual_server_id, opts)
      data
    end

    # Get the status of the load balancer virtual server
    # Returns the status of the virtual server by given load balancer serives id and load balancer virtual server id. 
    # @param service_id 
    # @param virtual_server_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :source Data source type.
    # @return [Array<(LbVirtualServerStatus, Integer, Hash)>] LbVirtualServerStatus data, response status code and response headers
    def get_load_balancer_virtual_server_status_with_http_info(service_id, virtual_server_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesLoadbalancerApi.get_load_balancer_virtual_server_status ...'
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling ManagementPlaneApiServicesLoadbalancerApi.get_load_balancer_virtual_server_status"
      end
      # verify the required parameter 'virtual_server_id' is set
      if @api_client.config.client_side_validation && virtual_server_id.nil?
        fail ArgumentError, "Missing the required parameter 'virtual_server_id' when calling ManagementPlaneApiServicesLoadbalancerApi.get_load_balancer_virtual_server_status"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/loadbalancer/services/{service-id}/virtual-servers/{virtual-server-id}/status'.sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'virtual-server-id' + '}', virtual_server_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'LbVirtualServerStatus' 

      auth_names = opts[:auth_names] || ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesLoadbalancerApi#get_load_balancer_virtual_server_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve a paginated list of load balancer application profiles
    # Retrieve a paginated list of load balancer application profiles. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :type application profile type
    # @return [LbAppProfileListResult]
    def list_load_balancer_application_profiles(opts = {})
      data, _status_code, _headers = list_load_balancer_application_profiles_with_http_info(opts)
      data
    end

    # Retrieve a paginated list of load balancer application profiles
    # Retrieve a paginated list of load balancer application profiles. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :type application profile type
    # @return [Array<(LbAppProfileListResult, Integer, Hash)>] LbAppProfileListResult data, response status code and response headers
    def list_load_balancer_application_profiles_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesLoadbalancerApi.list_load_balancer_application_profiles ...'
      end
      if @api_client.config.client_side_validation && opts[:'type'] && !['LbHttpProfile', 'LbFastTcpProfile', 'LbFastUdpProfile'].include?(opts[:'type'])
        fail ArgumentError, 'invalid value for "type", must be one of LbHttpProfile, LbFastTcpProfile, LbFastUdpProfile'
      end
      # resource path
      local_var_path = '/loadbalancer/application-profiles'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'LbAppProfileListResult' 

      auth_names = opts[:auth_names] || ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesLoadbalancerApi#list_load_balancer_application_profiles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve a paginated list of load balancer client-ssl profiles
    # Retrieve a paginated list of load balancer client-ssl profiles. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [LbClientSslProfileListResult]
    def list_load_balancer_client_ssl_profiles(opts = {})
      data, _status_code, _headers = list_load_balancer_client_ssl_profiles_with_http_info(opts)
      data
    end

    # Retrieve a paginated list of load balancer client-ssl profiles
    # Retrieve a paginated list of load balancer client-ssl profiles. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(LbClientSslProfileListResult, Integer, Hash)>] LbClientSslProfileListResult data, response status code and response headers
    def list_load_balancer_client_ssl_profiles_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesLoadbalancerApi.list_load_balancer_client_ssl_profiles ...'
      end
      # resource path
      local_var_path = '/loadbalancer/client-ssl-profiles'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'LbClientSslProfileListResult' 

      auth_names = opts[:auth_names] || ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesLoadbalancerApi#list_load_balancer_client_ssl_profiles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve a paginated list of load balancer monitors
    # Retrieve a paginated list of load balancer monitors. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :type monitor query type
    # @return [LbMonitorListResult]
    def list_load_balancer_monitors(opts = {})
      data, _status_code, _headers = list_load_balancer_monitors_with_http_info(opts)
      data
    end

    # Retrieve a paginated list of load balancer monitors
    # Retrieve a paginated list of load balancer monitors. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :type monitor query type
    # @return [Array<(LbMonitorListResult, Integer, Hash)>] LbMonitorListResult data, response status code and response headers
    def list_load_balancer_monitors_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesLoadbalancerApi.list_load_balancer_monitors ...'
      end
      if @api_client.config.client_side_validation && opts[:'type'] && !['LbHttpMonitor', 'LbHttpsMonitor', 'LbIcmpMonitor', 'LbTcpMonitor', 'LbUdpMonitor', 'LbPassiveMonitor', 'LbActiveMonitor'].include?(opts[:'type'])
        fail ArgumentError, 'invalid value for "type", must be one of LbHttpMonitor, LbHttpsMonitor, LbIcmpMonitor, LbTcpMonitor, LbUdpMonitor, LbPassiveMonitor, LbActiveMonitor'
      end
      # resource path
      local_var_path = '/loadbalancer/monitors'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'LbMonitorListResult' 

      auth_names = opts[:auth_names] || ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesLoadbalancerApi#list_load_balancer_monitors\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve a paginated list of load balancer persistence profiles
    # Retrieve a paginated list of load balancer persistence profiles. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :type persistence profile type
    # @return [LbPersistenceProfileListResult]
    def list_load_balancer_persistence_profiles(opts = {})
      data, _status_code, _headers = list_load_balancer_persistence_profiles_with_http_info(opts)
      data
    end

    # Retrieve a paginated list of load balancer persistence profiles
    # Retrieve a paginated list of load balancer persistence profiles. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :type persistence profile type
    # @return [Array<(LbPersistenceProfileListResult, Integer, Hash)>] LbPersistenceProfileListResult data, response status code and response headers
    def list_load_balancer_persistence_profiles_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesLoadbalancerApi.list_load_balancer_persistence_profiles ...'
      end
      if @api_client.config.client_side_validation && opts[:'type'] && !['LbCookiePersistenceProfile', 'LbSourceIpPersistenceProfile', 'LbGenericPersistenceProfile'].include?(opts[:'type'])
        fail ArgumentError, 'invalid value for "type", must be one of LbCookiePersistenceProfile, LbSourceIpPersistenceProfile, LbGenericPersistenceProfile'
      end
      # resource path
      local_var_path = '/loadbalancer/persistence-profiles'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'LbPersistenceProfileListResult' 

      auth_names = opts[:auth_names] || ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesLoadbalancerApi#list_load_balancer_persistence_profiles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the statistics list of load balancer pools
    # Returns the statistics list of load balancer pools in given load balancer service. Currently, only realtime mode is supported. 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :source Data source type.
    # @return [LbPoolStatisticsListResult]
    def list_load_balancer_pool_statistics(service_id, opts = {})
      data, _status_code, _headers = list_load_balancer_pool_statistics_with_http_info(service_id, opts)
      data
    end

    # Get the statistics list of load balancer pools
    # Returns the statistics list of load balancer pools in given load balancer service. Currently, only realtime mode is supported. 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :source Data source type.
    # @return [Array<(LbPoolStatisticsListResult, Integer, Hash)>] LbPoolStatisticsListResult data, response status code and response headers
    def list_load_balancer_pool_statistics_with_http_info(service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesLoadbalancerApi.list_load_balancer_pool_statistics ...'
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling ManagementPlaneApiServicesLoadbalancerApi.list_load_balancer_pool_statistics"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/loadbalancer/services/{service-id}/pools/statistics'.sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'LbPoolStatisticsListResult' 

      auth_names = opts[:auth_names] || ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesLoadbalancerApi#list_load_balancer_pool_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the status list of load balancer pools
    # Returns the status list of load balancer pools in given load balancer service. 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :source Data source type.
    # @return [LbPoolStatusListResult]
    def list_load_balancer_pool_statuses(service_id, opts = {})
      data, _status_code, _headers = list_load_balancer_pool_statuses_with_http_info(service_id, opts)
      data
    end

    # Get the status list of load balancer pools
    # Returns the status list of load balancer pools in given load balancer service. 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :source Data source type.
    # @return [Array<(LbPoolStatusListResult, Integer, Hash)>] LbPoolStatusListResult data, response status code and response headers
    def list_load_balancer_pool_statuses_with_http_info(service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesLoadbalancerApi.list_load_balancer_pool_statuses ...'
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling ManagementPlaneApiServicesLoadbalancerApi.list_load_balancer_pool_statuses"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/loadbalancer/services/{service-id}/pools/status'.sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'LbPoolStatusListResult' 

      auth_names = opts[:auth_names] || ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesLoadbalancerApi#list_load_balancer_pool_statuses\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve a paginated list of load balancer pools
    # Retrieve a paginated list of load balancer pools. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [LbPoolListResult]
    def list_load_balancer_pools(opts = {})
      data, _status_code, _headers = list_load_balancer_pools_with_http_info(opts)
      data
    end

    # Retrieve a paginated list of load balancer pools
    # Retrieve a paginated list of load balancer pools. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(LbPoolListResult, Integer, Hash)>] LbPoolListResult data, response status code and response headers
    def list_load_balancer_pools_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesLoadbalancerApi.list_load_balancer_pools ...'
      end
      # resource path
      local_var_path = '/loadbalancer/pools'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'LbPoolListResult' 

      auth_names = opts[:auth_names] || ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesLoadbalancerApi#list_load_balancer_pools\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve a paginated list of load balancer rules
    # Retrieve a paginated list of load balancer rules. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [LbRuleListResult]
    def list_load_balancer_rules(opts = {})
      data, _status_code, _headers = list_load_balancer_rules_with_http_info(opts)
      data
    end

    # Retrieve a paginated list of load balancer rules
    # Retrieve a paginated list of load balancer rules. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(LbRuleListResult, Integer, Hash)>] LbRuleListResult data, response status code and response headers
    def list_load_balancer_rules_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesLoadbalancerApi.list_load_balancer_rules ...'
      end
      # resource path
      local_var_path = '/loadbalancer/rules'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'LbRuleListResult' 

      auth_names = opts[:auth_names] || ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesLoadbalancerApi#list_load_balancer_rules\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve a paginated list of load balancer server-ssl profiles
    # Retrieve a paginated list of load balancer server-ssl profiles. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [LbServerSslProfileListResult]
    def list_load_balancer_server_ssl_profiles(opts = {})
      data, _status_code, _headers = list_load_balancer_server_ssl_profiles_with_http_info(opts)
      data
    end

    # Retrieve a paginated list of load balancer server-ssl profiles
    # Retrieve a paginated list of load balancer server-ssl profiles. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(LbServerSslProfileListResult, Integer, Hash)>] LbServerSslProfileListResult data, response status code and response headers
    def list_load_balancer_server_ssl_profiles_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesLoadbalancerApi.list_load_balancer_server_ssl_profiles ...'
      end
      # resource path
      local_var_path = '/loadbalancer/server-ssl-profiles'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'LbServerSslProfileListResult' 

      auth_names = opts[:auth_names] || ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesLoadbalancerApi#list_load_balancer_server_ssl_profiles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve a paginated list of load balancer services
    # Retrieve a paginated list of load balancer services. When logical_router_id is specified in request parameters, the associated load balancer services which are related to the given logical router returned. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [String] :logical_router_id Logical router identifier
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [LbServiceListResult]
    def list_load_balancer_services(opts = {})
      data, _status_code, _headers = list_load_balancer_services_with_http_info(opts)
      data
    end

    # Retrieve a paginated list of load balancer services
    # Retrieve a paginated list of load balancer services. When logical_router_id is specified in request parameters, the associated load balancer services which are related to the given logical router returned. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [String] :logical_router_id Logical router identifier
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(LbServiceListResult, Integer, Hash)>] LbServiceListResult data, response status code and response headers
    def list_load_balancer_services_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesLoadbalancerApi.list_load_balancer_services ...'
      end
      # resource path
      local_var_path = '/loadbalancer/services'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'logical_router_id'] = opts[:'logical_router_id'] if !opts[:'logical_router_id'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'LbServiceListResult' 

      auth_names = opts[:auth_names] || ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesLoadbalancerApi#list_load_balancer_services\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve a list of supported SSL ciphers and protocols
    # Retrieve a list of supported SSL ciphers and protocols. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [LbSslCipherAndProtocolListResult]
    def list_load_balancer_ssl_ciphers_and_protocols(opts = {})
      data, _status_code, _headers = list_load_balancer_ssl_ciphers_and_protocols_with_http_info(opts)
      data
    end

    # Retrieve a list of supported SSL ciphers and protocols
    # Retrieve a list of supported SSL ciphers and protocols. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(LbSslCipherAndProtocolListResult, Integer, Hash)>] LbSslCipherAndProtocolListResult data, response status code and response headers
    def list_load_balancer_ssl_ciphers_and_protocols_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesLoadbalancerApi.list_load_balancer_ssl_ciphers_and_protocols ...'
      end
      # resource path
      local_var_path = '/loadbalancer/ssl/ciphers-and-protocols'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'LbSslCipherAndProtocolListResult' 

      auth_names = opts[:auth_names] || ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesLoadbalancerApi#list_load_balancer_ssl_ciphers_and_protocols\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve a paginated list of load balancer TCP profiles
    # Retrieve a paginated list of load balancer TCP profiles. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [LbTcpProfileListResult]
    def list_load_balancer_tcp_profiles(opts = {})
      data, _status_code, _headers = list_load_balancer_tcp_profiles_with_http_info(opts)
      data
    end

    # Retrieve a paginated list of load balancer TCP profiles
    # Retrieve a paginated list of load balancer TCP profiles. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(LbTcpProfileListResult, Integer, Hash)>] LbTcpProfileListResult data, response status code and response headers
    def list_load_balancer_tcp_profiles_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesLoadbalancerApi.list_load_balancer_tcp_profiles ...'
      end
      # resource path
      local_var_path = '/loadbalancer/tcp-profiles'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'LbTcpProfileListResult' 

      auth_names = opts[:auth_names] || ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesLoadbalancerApi#list_load_balancer_tcp_profiles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the status list of virtual servers in given load balancer service
    # Returns the status list of virtual servers in given load balancer service. 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :source Data source type.
    # @return [LbVirtualServerStatusListResult]
    def list_load_balancer_virtual_server_statuses(service_id, opts = {})
      data, _status_code, _headers = list_load_balancer_virtual_server_statuses_with_http_info(service_id, opts)
      data
    end

    # Get the status list of virtual servers in given load balancer service
    # Returns the status list of virtual servers in given load balancer service. 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :source Data source type.
    # @return [Array<(LbVirtualServerStatusListResult, Integer, Hash)>] LbVirtualServerStatusListResult data, response status code and response headers
    def list_load_balancer_virtual_server_statuses_with_http_info(service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesLoadbalancerApi.list_load_balancer_virtual_server_statuses ...'
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling ManagementPlaneApiServicesLoadbalancerApi.list_load_balancer_virtual_server_statuses"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/loadbalancer/services/{service-id}/virtual-servers/status'.sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'LbVirtualServerStatusListResult' 

      auth_names = opts[:auth_names] || ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesLoadbalancerApi#list_load_balancer_virtual_server_statuses\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve a paginated list of load balancer virtual servers
    # Retrieve a paginated list of load balancer virtual servers. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [LbVirtualServerListResult]
    def list_load_balancer_virtual_servers(opts = {})
      data, _status_code, _headers = list_load_balancer_virtual_servers_with_http_info(opts)
      data
    end

    # Retrieve a paginated list of load balancer virtual servers
    # Retrieve a paginated list of load balancer virtual servers. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(LbVirtualServerListResult, Integer, Hash)>] LbVirtualServerListResult data, response status code and response headers
    def list_load_balancer_virtual_servers_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesLoadbalancerApi.list_load_balancer_virtual_servers ...'
      end
      # resource path
      local_var_path = '/loadbalancer/virtual-servers'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'LbVirtualServerListResult' 

      auth_names = opts[:auth_names] || ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesLoadbalancerApi#list_load_balancer_virtual_servers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the statistics list of virtual servers
    # Returns the statistics list of virtual servers in given load balancer service. Currently, only realtime mode is supported. 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :source Data source type.
    # @return [LbVirtualServerStatisticsListResult]
    def list_load_balancer_virtual_servers_statistics(service_id, opts = {})
      data, _status_code, _headers = list_load_balancer_virtual_servers_statistics_with_http_info(service_id, opts)
      data
    end

    # Get the statistics list of virtual servers
    # Returns the statistics list of virtual servers in given load balancer service. Currently, only realtime mode is supported. 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :source Data source type.
    # @return [Array<(LbVirtualServerStatisticsListResult, Integer, Hash)>] LbVirtualServerStatisticsListResult data, response status code and response headers
    def list_load_balancer_virtual_servers_statistics_with_http_info(service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesLoadbalancerApi.list_load_balancer_virtual_servers_statistics ...'
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling ManagementPlaneApiServicesLoadbalancerApi.list_load_balancer_virtual_servers_statistics"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/loadbalancer/services/{service-id}/virtual-servers/statistics'.sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'LbVirtualServerStatisticsListResult' 

      auth_names = opts[:auth_names] || ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesLoadbalancerApi#list_load_balancer_virtual_servers_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Add, remove, or modify load balancer pool members
    # For ADD_MEMBERS, pool members will be created and added to load balancer pool. This action is only valid for static pool members. For REMOVE_MEMBERS, pool members will be removed from load balancer pool via IP and port in pool member settings. This action is only valid for static pool members. For UPDATE_MEMBERS, pool members admin state will be updated. This action is valid for both static pool members and dynamic pool members. For dynamic pool members, this update will be stored in customized_members field in load balancer pool member group. 
    # @param body 
    # @param action Specifies addition, removal and modification action
    # @param pool_id 
    # @param [Hash] opts the optional parameters
    # @return [LbPool]
    def perform_pool_member_action(body, action, pool_id, opts = {})
      data, _status_code, _headers = perform_pool_member_action_with_http_info(body, action, pool_id, opts)
      data
    end

    # Add, remove, or modify load balancer pool members
    # For ADD_MEMBERS, pool members will be created and added to load balancer pool. This action is only valid for static pool members. For REMOVE_MEMBERS, pool members will be removed from load balancer pool via IP and port in pool member settings. This action is only valid for static pool members. For UPDATE_MEMBERS, pool members admin state will be updated. This action is valid for both static pool members and dynamic pool members. For dynamic pool members, this update will be stored in customized_members field in load balancer pool member group. 
    # @param body 
    # @param action Specifies addition, removal and modification action
    # @param pool_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(LbPool, Integer, Hash)>] LbPool data, response status code and response headers
    def perform_pool_member_action_with_http_info(body, action, pool_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesLoadbalancerApi.perform_pool_member_action ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ManagementPlaneApiServicesLoadbalancerApi.perform_pool_member_action"
      end
      # verify the required parameter 'action' is set
      if @api_client.config.client_side_validation && action.nil?
        fail ArgumentError, "Missing the required parameter 'action' when calling ManagementPlaneApiServicesLoadbalancerApi.perform_pool_member_action"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['ADD_MEMBERS', 'REMOVE_MEMBERS', 'UPDATE_MEMBERS'].include?(action)
        fail ArgumentError, "invalid value for 'action', must be one of ADD_MEMBERS, REMOVE_MEMBERS, UPDATE_MEMBERS"
      end
      # verify the required parameter 'pool_id' is set
      if @api_client.config.client_side_validation && pool_id.nil?
        fail ArgumentError, "Missing the required parameter 'pool_id' when calling ManagementPlaneApiServicesLoadbalancerApi.perform_pool_member_action"
      end
      # resource path
      local_var_path = '/loadbalancer/pools/{pool-id}'.sub('{' + 'pool-id' + '}', pool_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'action'] = action

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'LbPool' 

      auth_names = opts[:auth_names] || ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesLoadbalancerApi#perform_pool_member_action\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve a load balancer application profile
    # Retrieve a load balancer application profile. 
    # @param application_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [LbAppProfile]
    def read_load_balancer_application_profile(application_profile_id, opts = {})
      data, _status_code, _headers = read_load_balancer_application_profile_with_http_info(application_profile_id, opts)
      data
    end

    # Retrieve a load balancer application profile
    # Retrieve a load balancer application profile. 
    # @param application_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(LbAppProfile, Integer, Hash)>] LbAppProfile data, response status code and response headers
    def read_load_balancer_application_profile_with_http_info(application_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesLoadbalancerApi.read_load_balancer_application_profile ...'
      end
      # verify the required parameter 'application_profile_id' is set
      if @api_client.config.client_side_validation && application_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'application_profile_id' when calling ManagementPlaneApiServicesLoadbalancerApi.read_load_balancer_application_profile"
      end
      # resource path
      local_var_path = '/loadbalancer/application-profiles/{application-profile-id}'.sub('{' + 'application-profile-id' + '}', application_profile_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'LbAppProfile' 

      auth_names = opts[:auth_names] || ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesLoadbalancerApi#read_load_balancer_application_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve a load balancer client-ssl profile
    # Retrieve a load balancer client-ssl profile. 
    # @param client_ssl_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [LbClientSslProfile]
    def read_load_balancer_client_ssl_profile(client_ssl_profile_id, opts = {})
      data, _status_code, _headers = read_load_balancer_client_ssl_profile_with_http_info(client_ssl_profile_id, opts)
      data
    end

    # Retrieve a load balancer client-ssl profile
    # Retrieve a load balancer client-ssl profile. 
    # @param client_ssl_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(LbClientSslProfile, Integer, Hash)>] LbClientSslProfile data, response status code and response headers
    def read_load_balancer_client_ssl_profile_with_http_info(client_ssl_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesLoadbalancerApi.read_load_balancer_client_ssl_profile ...'
      end
      # verify the required parameter 'client_ssl_profile_id' is set
      if @api_client.config.client_side_validation && client_ssl_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_ssl_profile_id' when calling ManagementPlaneApiServicesLoadbalancerApi.read_load_balancer_client_ssl_profile"
      end
      # resource path
      local_var_path = '/loadbalancer/client-ssl-profiles/{client-ssl-profile-id}'.sub('{' + 'client-ssl-profile-id' + '}', client_ssl_profile_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'LbClientSslProfile' 

      auth_names = opts[:auth_names] || ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesLoadbalancerApi#read_load_balancer_client_ssl_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve a load balancer monitor
    # Retrieve a load balancer monitor. 
    # @param monitor_id 
    # @param [Hash] opts the optional parameters
    # @return [LbMonitor]
    def read_load_balancer_monitor(monitor_id, opts = {})
      data, _status_code, _headers = read_load_balancer_monitor_with_http_info(monitor_id, opts)
      data
    end

    # Retrieve a load balancer monitor
    # Retrieve a load balancer monitor. 
    # @param monitor_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(LbMonitor, Integer, Hash)>] LbMonitor data, response status code and response headers
    def read_load_balancer_monitor_with_http_info(monitor_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesLoadbalancerApi.read_load_balancer_monitor ...'
      end
      # verify the required parameter 'monitor_id' is set
      if @api_client.config.client_side_validation && monitor_id.nil?
        fail ArgumentError, "Missing the required parameter 'monitor_id' when calling ManagementPlaneApiServicesLoadbalancerApi.read_load_balancer_monitor"
      end
      # resource path
      local_var_path = '/loadbalancer/monitors/{monitor-id}'.sub('{' + 'monitor-id' + '}', monitor_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'LbMonitor' 

      auth_names = opts[:auth_names] || ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesLoadbalancerApi#read_load_balancer_monitor\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read load balancer usage for the given node
    # API is used to retrieve the usage of load balancer entities which include current number and remaining number of credits, virtual Servers, pools, pool Members and different size of LB services from the given node. Currently only Edge node is supported. 
    # @param node_id 
    # @param [Hash] opts the optional parameters
    # @return [LbNodeUsage]
    def read_load_balancer_node_usage(node_id, opts = {})
      data, _status_code, _headers = read_load_balancer_node_usage_with_http_info(node_id, opts)
      data
    end

    # Read load balancer usage for the given node
    # API is used to retrieve the usage of load balancer entities which include current number and remaining number of credits, virtual Servers, pools, pool Members and different size of LB services from the given node. Currently only Edge node is supported. 
    # @param node_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(LbNodeUsage, Integer, Hash)>] LbNodeUsage data, response status code and response headers
    def read_load_balancer_node_usage_with_http_info(node_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesLoadbalancerApi.read_load_balancer_node_usage ...'
      end
      # verify the required parameter 'node_id' is set
      if @api_client.config.client_side_validation && node_id.nil?
        fail ArgumentError, "Missing the required parameter 'node_id' when calling ManagementPlaneApiServicesLoadbalancerApi.read_load_balancer_node_usage"
      end
      # resource path
      local_var_path = '/loadbalancer/usage-per-node/{node-id}'.sub('{' + 'node-id' + '}', node_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'LbNodeUsage' 

      auth_names = opts[:auth_names] || ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesLoadbalancerApi#read_load_balancer_node_usage\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read load balancer node usage summary
    # API is used to retrieve the load balancer node usage summary for all nodes. 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :include_usages Whether to include node usages
    # @return [LbNodeUsageSummary]
    def read_load_balancer_node_usage_summary(opts = {})
      data, _status_code, _headers = read_load_balancer_node_usage_summary_with_http_info(opts)
      data
    end

    # Read load balancer node usage summary
    # API is used to retrieve the load balancer node usage summary for all nodes. 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :include_usages Whether to include node usages
    # @return [Array<(LbNodeUsageSummary, Integer, Hash)>] LbNodeUsageSummary data, response status code and response headers
    def read_load_balancer_node_usage_summary_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesLoadbalancerApi.read_load_balancer_node_usage_summary ...'
      end
      # resource path
      local_var_path = '/loadbalancer/node-usage-summary'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'include_usages'] = opts[:'include_usages'] if !opts[:'include_usages'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'LbNodeUsageSummary' 

      auth_names = opts[:auth_names] || ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesLoadbalancerApi#read_load_balancer_node_usage_summary\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve a load balancer persistence profile
    # Retrieve a load balancer persistence profile. 
    # @param persistence_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [LbPersistenceProfile]
    def read_load_balancer_persistence_profile(persistence_profile_id, opts = {})
      data, _status_code, _headers = read_load_balancer_persistence_profile_with_http_info(persistence_profile_id, opts)
      data
    end

    # Retrieve a load balancer persistence profile
    # Retrieve a load balancer persistence profile. 
    # @param persistence_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(LbPersistenceProfile, Integer, Hash)>] LbPersistenceProfile data, response status code and response headers
    def read_load_balancer_persistence_profile_with_http_info(persistence_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesLoadbalancerApi.read_load_balancer_persistence_profile ...'
      end
      # verify the required parameter 'persistence_profile_id' is set
      if @api_client.config.client_side_validation && persistence_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'persistence_profile_id' when calling ManagementPlaneApiServicesLoadbalancerApi.read_load_balancer_persistence_profile"
      end
      # resource path
      local_var_path = '/loadbalancer/persistence-profiles/{persistence-profile-id}'.sub('{' + 'persistence-profile-id' + '}', persistence_profile_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'LbPersistenceProfile' 

      auth_names = opts[:auth_names] || ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesLoadbalancerApi#read_load_balancer_persistence_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve a load balancer pool
    # Retrieve a load balancer pool. 
    # @param pool_id 
    # @param [Hash] opts the optional parameters
    # @return [LbPool]
    def read_load_balancer_pool(pool_id, opts = {})
      data, _status_code, _headers = read_load_balancer_pool_with_http_info(pool_id, opts)
      data
    end

    # Retrieve a load balancer pool
    # Retrieve a load balancer pool. 
    # @param pool_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(LbPool, Integer, Hash)>] LbPool data, response status code and response headers
    def read_load_balancer_pool_with_http_info(pool_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesLoadbalancerApi.read_load_balancer_pool ...'
      end
      # verify the required parameter 'pool_id' is set
      if @api_client.config.client_side_validation && pool_id.nil?
        fail ArgumentError, "Missing the required parameter 'pool_id' when calling ManagementPlaneApiServicesLoadbalancerApi.read_load_balancer_pool"
      end
      # resource path
      local_var_path = '/loadbalancer/pools/{pool-id}'.sub('{' + 'pool-id' + '}', pool_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'LbPool' 

      auth_names = opts[:auth_names] || ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesLoadbalancerApi#read_load_balancer_pool\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve a load balancer rule
    # Retrieve a load balancer rule. 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @return [LbRule]
    def read_load_balancer_rule(rule_id, opts = {})
      data, _status_code, _headers = read_load_balancer_rule_with_http_info(rule_id, opts)
      data
    end

    # Retrieve a load balancer rule
    # Retrieve a load balancer rule. 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(LbRule, Integer, Hash)>] LbRule data, response status code and response headers
    def read_load_balancer_rule_with_http_info(rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesLoadbalancerApi.read_load_balancer_rule ...'
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling ManagementPlaneApiServicesLoadbalancerApi.read_load_balancer_rule"
      end
      # resource path
      local_var_path = '/loadbalancer/rules/{rule-id}'.sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'LbRule' 

      auth_names = opts[:auth_names] || ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesLoadbalancerApi#read_load_balancer_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve a load balancer server-ssl profile
    # Retrieve a load balancer server-ssl profile. 
    # @param server_ssl_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [LbServerSslProfile]
    def read_load_balancer_server_ssl_profile(server_ssl_profile_id, opts = {})
      data, _status_code, _headers = read_load_balancer_server_ssl_profile_with_http_info(server_ssl_profile_id, opts)
      data
    end

    # Retrieve a load balancer server-ssl profile
    # Retrieve a load balancer server-ssl profile. 
    # @param server_ssl_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(LbServerSslProfile, Integer, Hash)>] LbServerSslProfile data, response status code and response headers
    def read_load_balancer_server_ssl_profile_with_http_info(server_ssl_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesLoadbalancerApi.read_load_balancer_server_ssl_profile ...'
      end
      # verify the required parameter 'server_ssl_profile_id' is set
      if @api_client.config.client_side_validation && server_ssl_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'server_ssl_profile_id' when calling ManagementPlaneApiServicesLoadbalancerApi.read_load_balancer_server_ssl_profile"
      end
      # resource path
      local_var_path = '/loadbalancer/server-ssl-profiles/{server-ssl-profile-id}'.sub('{' + 'server-ssl-profile-id' + '}', server_ssl_profile_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'LbServerSslProfile' 

      auth_names = opts[:auth_names] || ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesLoadbalancerApi#read_load_balancer_server_ssl_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve a load balancer service
    # Retrieve a load balancer service. 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @return [LbService]
    def read_load_balancer_service(service_id, opts = {})
      data, _status_code, _headers = read_load_balancer_service_with_http_info(service_id, opts)
      data
    end

    # Retrieve a load balancer service
    # Retrieve a load balancer service. 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(LbService, Integer, Hash)>] LbService data, response status code and response headers
    def read_load_balancer_service_with_http_info(service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesLoadbalancerApi.read_load_balancer_service ...'
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling ManagementPlaneApiServicesLoadbalancerApi.read_load_balancer_service"
      end
      # resource path
      local_var_path = '/loadbalancer/services/{service-id}'.sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'LbService' 

      auth_names = opts[:auth_names] || ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesLoadbalancerApi#read_load_balancer_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read the debug information of the load balancer service
    # API to download below information which will be used for debugging and troubleshooting. 1) Load balancer service 2) Load balancer associated virtual servers 3) Load balancer associated pools 4) Load balancer associated profiles such as persistence, SSL, application. 5) Load balancer associated monitors 6) Load balancer associated rules 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @return [LbServiceDebugInfo]
    def read_load_balancer_service_debug_info(service_id, opts = {})
      data, _status_code, _headers = read_load_balancer_service_debug_info_with_http_info(service_id, opts)
      data
    end

    # Read the debug information of the load balancer service
    # API to download below information which will be used for debugging and troubleshooting. 1) Load balancer service 2) Load balancer associated virtual servers 3) Load balancer associated pools 4) Load balancer associated profiles such as persistence, SSL, application. 5) Load balancer associated monitors 6) Load balancer associated rules 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(LbServiceDebugInfo, Integer, Hash)>] LbServiceDebugInfo data, response status code and response headers
    def read_load_balancer_service_debug_info_with_http_info(service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesLoadbalancerApi.read_load_balancer_service_debug_info ...'
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling ManagementPlaneApiServicesLoadbalancerApi.read_load_balancer_service_debug_info"
      end
      # resource path
      local_var_path = '/loadbalancer/services/{service-id}/debug-info'.sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'LbServiceDebugInfo' 

      auth_names = opts[:auth_names] || ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesLoadbalancerApi#read_load_balancer_service_debug_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read the usage information of the given load balancer service
    # API to fetch the capacity and current usage of the given load balancer service. 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @return [LbServiceUsage]
    def read_load_balancer_service_usage(service_id, opts = {})
      data, _status_code, _headers = read_load_balancer_service_usage_with_http_info(service_id, opts)
      data
    end

    # Read the usage information of the given load balancer service
    # API to fetch the capacity and current usage of the given load balancer service. 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(LbServiceUsage, Integer, Hash)>] LbServiceUsage data, response status code and response headers
    def read_load_balancer_service_usage_with_http_info(service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesLoadbalancerApi.read_load_balancer_service_usage ...'
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling ManagementPlaneApiServicesLoadbalancerApi.read_load_balancer_service_usage"
      end
      # resource path
      local_var_path = '/loadbalancer/services/{service-id}/usage'.sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'LbServiceUsage' 

      auth_names = opts[:auth_names] || ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesLoadbalancerApi#read_load_balancer_service_usage\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve a load balancer TCP profile
    # Retrieve a load balancer TCP profile. 
    # @param tcp_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [LbTcpProfile]
    def read_load_balancer_tcp_profile(tcp_profile_id, opts = {})
      data, _status_code, _headers = read_load_balancer_tcp_profile_with_http_info(tcp_profile_id, opts)
      data
    end

    # Retrieve a load balancer TCP profile
    # Retrieve a load balancer TCP profile. 
    # @param tcp_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(LbTcpProfile, Integer, Hash)>] LbTcpProfile data, response status code and response headers
    def read_load_balancer_tcp_profile_with_http_info(tcp_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesLoadbalancerApi.read_load_balancer_tcp_profile ...'
      end
      # verify the required parameter 'tcp_profile_id' is set
      if @api_client.config.client_side_validation && tcp_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'tcp_profile_id' when calling ManagementPlaneApiServicesLoadbalancerApi.read_load_balancer_tcp_profile"
      end
      # resource path
      local_var_path = '/loadbalancer/tcp-profiles/{tcp-profile-id}'.sub('{' + 'tcp-profile-id' + '}', tcp_profile_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'LbTcpProfile' 

      auth_names = opts[:auth_names] || ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesLoadbalancerApi#read_load_balancer_tcp_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve a load balancer virtual server
    # Retrieve a load balancer virtual server. 
    # @param virtual_server_id 
    # @param [Hash] opts the optional parameters
    # @return [LbVirtualServer]
    def read_load_balancer_virtual_server(virtual_server_id, opts = {})
      data, _status_code, _headers = read_load_balancer_virtual_server_with_http_info(virtual_server_id, opts)
      data
    end

    # Retrieve a load balancer virtual server
    # Retrieve a load balancer virtual server. 
    # @param virtual_server_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(LbVirtualServer, Integer, Hash)>] LbVirtualServer data, response status code and response headers
    def read_load_balancer_virtual_server_with_http_info(virtual_server_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesLoadbalancerApi.read_load_balancer_virtual_server ...'
      end
      # verify the required parameter 'virtual_server_id' is set
      if @api_client.config.client_side_validation && virtual_server_id.nil?
        fail ArgumentError, "Missing the required parameter 'virtual_server_id' when calling ManagementPlaneApiServicesLoadbalancerApi.read_load_balancer_virtual_server"
      end
      # resource path
      local_var_path = '/loadbalancer/virtual-servers/{virtual-server-id}'.sub('{' + 'virtual-server-id' + '}', virtual_server_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'LbVirtualServer' 

      auth_names = opts[:auth_names] || ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesLoadbalancerApi#read_load_balancer_virtual_server\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a load balancer application profile
    # Update a load balancer application profile. 
    # @param body 
    # @param application_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [LbAppProfile]
    def update_load_balancer_application_profile(body, application_profile_id, opts = {})
      data, _status_code, _headers = update_load_balancer_application_profile_with_http_info(body, application_profile_id, opts)
      data
    end

    # Update a load balancer application profile
    # Update a load balancer application profile. 
    # @param body 
    # @param application_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(LbAppProfile, Integer, Hash)>] LbAppProfile data, response status code and response headers
    def update_load_balancer_application_profile_with_http_info(body, application_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesLoadbalancerApi.update_load_balancer_application_profile ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ManagementPlaneApiServicesLoadbalancerApi.update_load_balancer_application_profile"
      end
      # verify the required parameter 'application_profile_id' is set
      if @api_client.config.client_side_validation && application_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'application_profile_id' when calling ManagementPlaneApiServicesLoadbalancerApi.update_load_balancer_application_profile"
      end
      # resource path
      local_var_path = '/loadbalancer/application-profiles/{application-profile-id}'.sub('{' + 'application-profile-id' + '}', application_profile_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'LbAppProfile' 

      auth_names = opts[:auth_names] || ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesLoadbalancerApi#update_load_balancer_application_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a load balancer client-ssl profile
    # Update a load balancer client-ssl profile. 
    # @param body 
    # @param client_ssl_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [LbClientSslProfile]
    def update_load_balancer_client_ssl_profile(body, client_ssl_profile_id, opts = {})
      data, _status_code, _headers = update_load_balancer_client_ssl_profile_with_http_info(body, client_ssl_profile_id, opts)
      data
    end

    # Update a load balancer client-ssl profile
    # Update a load balancer client-ssl profile. 
    # @param body 
    # @param client_ssl_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(LbClientSslProfile, Integer, Hash)>] LbClientSslProfile data, response status code and response headers
    def update_load_balancer_client_ssl_profile_with_http_info(body, client_ssl_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesLoadbalancerApi.update_load_balancer_client_ssl_profile ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ManagementPlaneApiServicesLoadbalancerApi.update_load_balancer_client_ssl_profile"
      end
      # verify the required parameter 'client_ssl_profile_id' is set
      if @api_client.config.client_side_validation && client_ssl_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_ssl_profile_id' when calling ManagementPlaneApiServicesLoadbalancerApi.update_load_balancer_client_ssl_profile"
      end
      # resource path
      local_var_path = '/loadbalancer/client-ssl-profiles/{client-ssl-profile-id}'.sub('{' + 'client-ssl-profile-id' + '}', client_ssl_profile_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'LbClientSslProfile' 

      auth_names = opts[:auth_names] || ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesLoadbalancerApi#update_load_balancer_client_ssl_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a load balancer monitor
    # Update a load balancer monitor. 
    # @param body 
    # @param monitor_id 
    # @param [Hash] opts the optional parameters
    # @return [LbMonitor]
    def update_load_balancer_monitor(body, monitor_id, opts = {})
      data, _status_code, _headers = update_load_balancer_monitor_with_http_info(body, monitor_id, opts)
      data
    end

    # Update a load balancer monitor
    # Update a load balancer monitor. 
    # @param body 
    # @param monitor_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(LbMonitor, Integer, Hash)>] LbMonitor data, response status code and response headers
    def update_load_balancer_monitor_with_http_info(body, monitor_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesLoadbalancerApi.update_load_balancer_monitor ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ManagementPlaneApiServicesLoadbalancerApi.update_load_balancer_monitor"
      end
      # verify the required parameter 'monitor_id' is set
      if @api_client.config.client_side_validation && monitor_id.nil?
        fail ArgumentError, "Missing the required parameter 'monitor_id' when calling ManagementPlaneApiServicesLoadbalancerApi.update_load_balancer_monitor"
      end
      # resource path
      local_var_path = '/loadbalancer/monitors/{monitor-id}'.sub('{' + 'monitor-id' + '}', monitor_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'LbMonitor' 

      auth_names = opts[:auth_names] || ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesLoadbalancerApi#update_load_balancer_monitor\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a load balancer persistence profile
    # Update a load balancer persistence profile. 
    # @param body 
    # @param persistence_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [LbPersistenceProfile]
    def update_load_balancer_persistence_profile(body, persistence_profile_id, opts = {})
      data, _status_code, _headers = update_load_balancer_persistence_profile_with_http_info(body, persistence_profile_id, opts)
      data
    end

    # Update a load balancer persistence profile
    # Update a load balancer persistence profile. 
    # @param body 
    # @param persistence_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(LbPersistenceProfile, Integer, Hash)>] LbPersistenceProfile data, response status code and response headers
    def update_load_balancer_persistence_profile_with_http_info(body, persistence_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesLoadbalancerApi.update_load_balancer_persistence_profile ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ManagementPlaneApiServicesLoadbalancerApi.update_load_balancer_persistence_profile"
      end
      # verify the required parameter 'persistence_profile_id' is set
      if @api_client.config.client_side_validation && persistence_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'persistence_profile_id' when calling ManagementPlaneApiServicesLoadbalancerApi.update_load_balancer_persistence_profile"
      end
      # resource path
      local_var_path = '/loadbalancer/persistence-profiles/{persistence-profile-id}'.sub('{' + 'persistence-profile-id' + '}', persistence_profile_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'LbPersistenceProfile' 

      auth_names = opts[:auth_names] || ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesLoadbalancerApi#update_load_balancer_persistence_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a load balancer pool
    # Update a load balancer pool. 
    # @param body 
    # @param pool_id 
    # @param [Hash] opts the optional parameters
    # @return [LbPool]
    def update_load_balancer_pool(body, pool_id, opts = {})
      data, _status_code, _headers = update_load_balancer_pool_with_http_info(body, pool_id, opts)
      data
    end

    # Update a load balancer pool
    # Update a load balancer pool. 
    # @param body 
    # @param pool_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(LbPool, Integer, Hash)>] LbPool data, response status code and response headers
    def update_load_balancer_pool_with_http_info(body, pool_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesLoadbalancerApi.update_load_balancer_pool ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ManagementPlaneApiServicesLoadbalancerApi.update_load_balancer_pool"
      end
      # verify the required parameter 'pool_id' is set
      if @api_client.config.client_side_validation && pool_id.nil?
        fail ArgumentError, "Missing the required parameter 'pool_id' when calling ManagementPlaneApiServicesLoadbalancerApi.update_load_balancer_pool"
      end
      # resource path
      local_var_path = '/loadbalancer/pools/{pool-id}'.sub('{' + 'pool-id' + '}', pool_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'LbPool' 

      auth_names = opts[:auth_names] || ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesLoadbalancerApi#update_load_balancer_pool\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a load balancer rule
    # Update a load balancer rule. 
    # @param body 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @return [LbRule]
    def update_load_balancer_rule(body, rule_id, opts = {})
      data, _status_code, _headers = update_load_balancer_rule_with_http_info(body, rule_id, opts)
      data
    end

    # Update a load balancer rule
    # Update a load balancer rule. 
    # @param body 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(LbRule, Integer, Hash)>] LbRule data, response status code and response headers
    def update_load_balancer_rule_with_http_info(body, rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesLoadbalancerApi.update_load_balancer_rule ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ManagementPlaneApiServicesLoadbalancerApi.update_load_balancer_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling ManagementPlaneApiServicesLoadbalancerApi.update_load_balancer_rule"
      end
      # resource path
      local_var_path = '/loadbalancer/rules/{rule-id}'.sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'LbRule' 

      auth_names = opts[:auth_names] || ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesLoadbalancerApi#update_load_balancer_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a load balancer server-ssl profile
    # Update a load balancer server-ssl profile. 
    # @param body 
    # @param server_ssl_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [LbServerSslProfile]
    def update_load_balancer_server_ssl_profile(body, server_ssl_profile_id, opts = {})
      data, _status_code, _headers = update_load_balancer_server_ssl_profile_with_http_info(body, server_ssl_profile_id, opts)
      data
    end

    # Update a load balancer server-ssl profile
    # Update a load balancer server-ssl profile. 
    # @param body 
    # @param server_ssl_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(LbServerSslProfile, Integer, Hash)>] LbServerSslProfile data, response status code and response headers
    def update_load_balancer_server_ssl_profile_with_http_info(body, server_ssl_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesLoadbalancerApi.update_load_balancer_server_ssl_profile ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ManagementPlaneApiServicesLoadbalancerApi.update_load_balancer_server_ssl_profile"
      end
      # verify the required parameter 'server_ssl_profile_id' is set
      if @api_client.config.client_side_validation && server_ssl_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'server_ssl_profile_id' when calling ManagementPlaneApiServicesLoadbalancerApi.update_load_balancer_server_ssl_profile"
      end
      # resource path
      local_var_path = '/loadbalancer/server-ssl-profiles/{server-ssl-profile-id}'.sub('{' + 'server-ssl-profile-id' + '}', server_ssl_profile_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'LbServerSslProfile' 

      auth_names = opts[:auth_names] || ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesLoadbalancerApi#update_load_balancer_server_ssl_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a load balancer service
    # Update a load balancer service. 
    # @param body 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @return [LbService]
    def update_load_balancer_service(body, service_id, opts = {})
      data, _status_code, _headers = update_load_balancer_service_with_http_info(body, service_id, opts)
      data
    end

    # Update a load balancer service
    # Update a load balancer service. 
    # @param body 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(LbService, Integer, Hash)>] LbService data, response status code and response headers
    def update_load_balancer_service_with_http_info(body, service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesLoadbalancerApi.update_load_balancer_service ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ManagementPlaneApiServicesLoadbalancerApi.update_load_balancer_service"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling ManagementPlaneApiServicesLoadbalancerApi.update_load_balancer_service"
      end
      # resource path
      local_var_path = '/loadbalancer/services/{service-id}'.sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'LbService' 

      auth_names = opts[:auth_names] || ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesLoadbalancerApi#update_load_balancer_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a load balancer TCP profile
    # Update a load balancer TCP profile. 
    # @param body 
    # @param tcp_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [LbTcpProfile]
    def update_load_balancer_tcp_profile(body, tcp_profile_id, opts = {})
      data, _status_code, _headers = update_load_balancer_tcp_profile_with_http_info(body, tcp_profile_id, opts)
      data
    end

    # Update a load balancer TCP profile
    # Update a load balancer TCP profile. 
    # @param body 
    # @param tcp_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(LbTcpProfile, Integer, Hash)>] LbTcpProfile data, response status code and response headers
    def update_load_balancer_tcp_profile_with_http_info(body, tcp_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesLoadbalancerApi.update_load_balancer_tcp_profile ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ManagementPlaneApiServicesLoadbalancerApi.update_load_balancer_tcp_profile"
      end
      # verify the required parameter 'tcp_profile_id' is set
      if @api_client.config.client_side_validation && tcp_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'tcp_profile_id' when calling ManagementPlaneApiServicesLoadbalancerApi.update_load_balancer_tcp_profile"
      end
      # resource path
      local_var_path = '/loadbalancer/tcp-profiles/{tcp-profile-id}'.sub('{' + 'tcp-profile-id' + '}', tcp_profile_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'LbTcpProfile' 

      auth_names = opts[:auth_names] || ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesLoadbalancerApi#update_load_balancer_tcp_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a load balancer virtual server
    # Update a load balancer virtual server. 
    # @param body 
    # @param virtual_server_id 
    # @param [Hash] opts the optional parameters
    # @return [LbVirtualServer]
    def update_load_balancer_virtual_server(body, virtual_server_id, opts = {})
      data, _status_code, _headers = update_load_balancer_virtual_server_with_http_info(body, virtual_server_id, opts)
      data
    end

    # Update a load balancer virtual server
    # Update a load balancer virtual server. 
    # @param body 
    # @param virtual_server_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(LbVirtualServer, Integer, Hash)>] LbVirtualServer data, response status code and response headers
    def update_load_balancer_virtual_server_with_http_info(body, virtual_server_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesLoadbalancerApi.update_load_balancer_virtual_server ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ManagementPlaneApiServicesLoadbalancerApi.update_load_balancer_virtual_server"
      end
      # verify the required parameter 'virtual_server_id' is set
      if @api_client.config.client_side_validation && virtual_server_id.nil?
        fail ArgumentError, "Missing the required parameter 'virtual_server_id' when calling ManagementPlaneApiServicesLoadbalancerApi.update_load_balancer_virtual_server"
      end
      # resource path
      local_var_path = '/loadbalancer/virtual-servers/{virtual-server-id}'.sub('{' + 'virtual-server-id' + '}', virtual_server_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'LbVirtualServer' 

      auth_names = opts[:auth_names] || ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesLoadbalancerApi#update_load_balancer_virtual_server\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a load balancer virtual server with rules
    # It is used to update virtual servers, the associated rules and update the binding of virtual server and rules. To add new rules, make sure the rules which have no identifier specified, the new rules are automatically generated and associated to the virtual server. To delete old rules, the rules should not be configured in new action, the UUID of deleted rules should be also removed from rule_ids. To update rules, the rules should be specified with new change and configured with identifier. If there are some rules which are not modified, those rule should not be specified in the rules list, the UUID list of rules should be specified in rule_ids of LbVirtualServer. 
    # @param body 
    # @param virtual_server_id 
    # @param [Hash] opts the optional parameters
    # @return [LbVirtualServerWithRule]
    def update_load_balancer_virtual_server_with_rules_update_with_rules(body, virtual_server_id, opts = {})
      data, _status_code, _headers = update_load_balancer_virtual_server_with_rules_update_with_rules_with_http_info(body, virtual_server_id, opts)
      data
    end

    # Update a load balancer virtual server with rules
    # It is used to update virtual servers, the associated rules and update the binding of virtual server and rules. To add new rules, make sure the rules which have no identifier specified, the new rules are automatically generated and associated to the virtual server. To delete old rules, the rules should not be configured in new action, the UUID of deleted rules should be also removed from rule_ids. To update rules, the rules should be specified with new change and configured with identifier. If there are some rules which are not modified, those rule should not be specified in the rules list, the UUID list of rules should be specified in rule_ids of LbVirtualServer. 
    # @param body 
    # @param virtual_server_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(LbVirtualServerWithRule, Integer, Hash)>] LbVirtualServerWithRule data, response status code and response headers
    def update_load_balancer_virtual_server_with_rules_update_with_rules_with_http_info(body, virtual_server_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesLoadbalancerApi.update_load_balancer_virtual_server_with_rules_update_with_rules ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ManagementPlaneApiServicesLoadbalancerApi.update_load_balancer_virtual_server_with_rules_update_with_rules"
      end
      # verify the required parameter 'virtual_server_id' is set
      if @api_client.config.client_side_validation && virtual_server_id.nil?
        fail ArgumentError, "Missing the required parameter 'virtual_server_id' when calling ManagementPlaneApiServicesLoadbalancerApi.update_load_balancer_virtual_server_with_rules_update_with_rules"
      end
      # resource path
      local_var_path = '/loadbalancer/virtual-servers/{virtual-server-id}?action=update_with_rules'.sub('{' + 'virtual-server-id' + '}', virtual_server_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'LbVirtualServerWithRule' 

      auth_names = opts[:auth_names] || ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesLoadbalancerApi#update_load_balancer_virtual_server_with_rules_update_with_rules\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
