=begin
#NSX-T Manager API

#VMware NSX-T Manager REST API

OpenAPI spec version: 2.5.1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.25
=end

module NSXT
  class ManagementPlaneApiAppDiscoveryApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Adds a new app profile
    # Adds a new app profile 
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [AppProfile]
    def add_app_profile(body, opts = {})
      data, _status_code, _headers = add_app_profile_with_http_info(body, opts)
      data
    end

    # Adds a new app profile
    # Adds a new app profile 
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AppProfile, Integer, Hash)>] AppProfile data, response status code and response headers
    def add_app_profile_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiAppDiscoveryApi.add_app_profile ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ManagementPlaneApiAppDiscoveryApi.add_app_profile"
      end
      # resource path
      local_var_path = '/app-discovery/app-profiles'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'AppProfile' 

      auth_names = opts[:auth_names] || ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiAppDiscoveryApi#add_app_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Cancel and delete the application discovery session
    # Cancel and delete the application discovery session 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_app_discovery_session(session_id, opts = {})
      delete_app_discovery_session_with_http_info(session_id, opts)
      nil
    end

    # Cancel and delete the application discovery session
    # Cancel and delete the application discovery session 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_app_discovery_session_with_http_info(session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiAppDiscoveryApi.delete_app_discovery_session ...'
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling ManagementPlaneApiAppDiscoveryApi.delete_app_discovery_session"
      end
      # resource path
      local_var_path = '/app-discovery/sessions/{session-id}'.sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiAppDiscoveryApi#delete_app_discovery_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete App Profile
    # Deletes the specified AppProfile. 
    # @param app_profile_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere  (default to false)
    # @return [nil]
    def delete_app_profile(app_profile_id, opts = {})
      delete_app_profile_with_http_info(app_profile_id, opts)
      nil
    end

    # Delete App Profile
    # Deletes the specified AppProfile. 
    # @param app_profile_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_app_profile_with_http_info(app_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiAppDiscoveryApi.delete_app_profile ...'
      end
      # verify the required parameter 'app_profile_id' is set
      if @api_client.config.client_side_validation && app_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'app_profile_id' when calling ManagementPlaneApiAppDiscoveryApi.delete_app_profile"
      end
      # resource path
      local_var_path = '/app-discovery/app-profiles/{app-profile-id}'.sub('{' + 'app-profile-id' + '}', app_profile_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'force'] = opts[:'force'] if !opts[:'force'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiAppDiscoveryApi#delete_app_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Returns the status of the application discovery session and other details
    # Returns the status of the application discovery session and other details 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @return [AppDiscoverySession]
    def get_app_discovery_session(session_id, opts = {})
      data, _status_code, _headers = get_app_discovery_session_with_http_info(session_id, opts)
      data
    end

    # Returns the status of the application discovery session and other details
    # Returns the status of the application discovery session and other details 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AppDiscoverySession, Integer, Hash)>] AppDiscoverySession data, response status code and response headers
    def get_app_discovery_session_with_http_info(session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiAppDiscoveryApi.get_app_discovery_session ...'
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling ManagementPlaneApiAppDiscoveryApi.get_app_discovery_session"
      end
      # resource path
      local_var_path = '/app-discovery/sessions/{session-id}'.sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'AppDiscoverySession' 

      auth_names = opts[:auth_names] || ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiAppDiscoveryApi#get_app_discovery_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # application profiles in this application discovery session
    # Returns the application profiles that was part of the application discovery session | while it was started. 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [AppProfileListResult]
    def get_app_discovery_session_app_profiles(session_id, opts = {})
      data, _status_code, _headers = get_app_discovery_session_app_profiles_with_http_info(session_id, opts)
      data
    end

    # application profiles in this application discovery session
    # Returns the application profiles that was part of the application discovery session | while it was started. 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(AppProfileListResult, Integer, Hash)>] AppProfileListResult data, response status code and response headers
    def get_app_discovery_session_app_profiles_with_http_info(session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiAppDiscoveryApi.get_app_discovery_session_app_profiles ...'
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling ManagementPlaneApiAppDiscoveryApi.get_app_discovery_session_app_profiles"
      end
      # resource path
      local_var_path = '/app-discovery/sessions/{session-id}/app-profiles'.sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'AppProfileListResult' 

      auth_names = opts[:auth_names] || ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiAppDiscoveryApi#get_app_discovery_session_app_profiles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Returns the details of the installed apps for the app profile ID in that session
    # Returns the details of the installed apps for the app profile ID in that session 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :app_profile_id 
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :vm_id 
    # @return [AppInfoListResult]
    def get_app_discovery_session_installed_apps(session_id, opts = {})
      data, _status_code, _headers = get_app_discovery_session_installed_apps_with_http_info(session_id, opts)
      data
    end

    # Returns the details of the installed apps for the app profile ID in that session
    # Returns the details of the installed apps for the app profile ID in that session 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :app_profile_id 
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :vm_id 
    # @return [Array<(AppInfoListResult, Integer, Hash)>] AppInfoListResult data, response status code and response headers
    def get_app_discovery_session_installed_apps_with_http_info(session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiAppDiscoveryApi.get_app_discovery_session_installed_apps ...'
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling ManagementPlaneApiAppDiscoveryApi.get_app_discovery_session_installed_apps"
      end
      # resource path
      local_var_path = '/app-discovery/sessions/{session-id}/installed-apps'.sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'app_profile_id'] = opts[:'app_profile_id'] if !opts[:'app_profile_id'].nil?
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'vm_id'] = opts[:'vm_id'] if !opts[:'vm_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'AppInfoListResult' 

      auth_names = opts[:auth_names] || ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiAppDiscoveryApi#get_app_discovery_session_installed_apps\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # vms in the ns-group of the application discovery session
    # Returns the vms in the ns-group of the application discovery session 
    # @param session_id 
    # @param ns_group_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [AppDiscoveryVmInfoListResult]
    def get_app_discovery_session_ns_group_members(session_id, ns_group_id, opts = {})
      data, _status_code, _headers = get_app_discovery_session_ns_group_members_with_http_info(session_id, ns_group_id, opts)
      data
    end

    # vms in the ns-group of the application discovery session
    # Returns the vms in the ns-group of the application discovery session 
    # @param session_id 
    # @param ns_group_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(AppDiscoveryVmInfoListResult, Integer, Hash)>] AppDiscoveryVmInfoListResult data, response status code and response headers
    def get_app_discovery_session_ns_group_members_with_http_info(session_id, ns_group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiAppDiscoveryApi.get_app_discovery_session_ns_group_members ...'
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling ManagementPlaneApiAppDiscoveryApi.get_app_discovery_session_ns_group_members"
      end
      # verify the required parameter 'ns_group_id' is set
      if @api_client.config.client_side_validation && ns_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'ns_group_id' when calling ManagementPlaneApiAppDiscoveryApi.get_app_discovery_session_ns_group_members"
      end
      # resource path
      local_var_path = '/app-discovery/sessions/{session-id}/ns-groups/{ns-group-id}/members'.sub('{' + 'session-id' + '}', session_id.to_s).sub('{' + 'ns-group-id' + '}', ns_group_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'AppDiscoveryVmInfoListResult' 

      auth_names = opts[:auth_names] || ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiAppDiscoveryApi#get_app_discovery_session_ns_group_members\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # ns-groups in this application discovery session
    # Returns the ns groups that was part of the application discovery session | while it was started 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [NSGroupMetaInfoListResult]
    def get_app_discovery_session_ns_groups(session_id, opts = {})
      data, _status_code, _headers = get_app_discovery_session_ns_groups_with_http_info(session_id, opts)
      data
    end

    # ns-groups in this application discovery session
    # Returns the ns groups that was part of the application discovery session | while it was started 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(NSGroupMetaInfoListResult, Integer, Hash)>] NSGroupMetaInfoListResult data, response status code and response headers
    def get_app_discovery_session_ns_groups_with_http_info(session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiAppDiscoveryApi.get_app_discovery_session_ns_groups ...'
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling ManagementPlaneApiAppDiscoveryApi.get_app_discovery_session_ns_groups"
      end
      # resource path
      local_var_path = '/app-discovery/sessions/{session-id}/ns-groups'.sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'NSGroupMetaInfoListResult' 

      auth_names = opts[:auth_names] || ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiAppDiscoveryApi#get_app_discovery_session_ns_groups\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Returns the summary of the application discovery session
    # Returns the summary of the application discovery session 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @return [AppDiscoverySessionResultSummary]
    def get_app_discovery_session_summary(session_id, opts = {})
      data, _status_code, _headers = get_app_discovery_session_summary_with_http_info(session_id, opts)
      data
    end

    # Returns the summary of the application discovery session
    # Returns the summary of the application discovery session 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AppDiscoverySessionResultSummary, Integer, Hash)>] AppDiscoverySessionResultSummary data, response status code and response headers
    def get_app_discovery_session_summary_with_http_info(session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiAppDiscoveryApi.get_app_discovery_session_summary ...'
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling ManagementPlaneApiAppDiscoveryApi.get_app_discovery_session_summary"
      end
      # resource path
      local_var_path = '/app-discovery/sessions/{session-id}/summary'.sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'AppDiscoverySessionResultSummary' 

      auth_names = opts[:auth_names] || ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiAppDiscoveryApi#get_app_discovery_session_summary\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Returns the list of the application discovery sessions available
    # Returns the list of the application discovery sessions available 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :group_id NSGroup id, helps user query sessions related to one nsgroup
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :status Session Status, e.g. get all running sessions
    # @return [AppDiscoverySessionsListResult]
    def get_app_discovery_sessions(opts = {})
      data, _status_code, _headers = get_app_discovery_sessions_with_http_info(opts)
      data
    end

    # Returns the list of the application discovery sessions available
    # Returns the list of the application discovery sessions available 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :group_id NSGroup id, helps user query sessions related to one nsgroup
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :status Session Status, e.g. get all running sessions
    # @return [Array<(AppDiscoverySessionsListResult, Integer, Hash)>] AppDiscoverySessionsListResult data, response status code and response headers
    def get_app_discovery_sessions_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiAppDiscoveryApi.get_app_discovery_sessions ...'
      end
      if @api_client.config.client_side_validation && opts[:'status'] && !['STARTING', 'FAILED', 'RUNNING', 'FINISHED'].include?(opts[:'status'])
        fail ArgumentError, 'invalid value for "status", must be one of STARTING, FAILED, RUNNING, FINISHED'
      end
      # resource path
      local_var_path = '/app-discovery/sessions'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'AppDiscoverySessionsListResult' 

      auth_names = opts[:auth_names] || ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiAppDiscoveryApi#get_app_discovery_sessions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Returns detail of the app profile
    # Returns detail of the app profile 
    # @param app_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [AppProfile]
    def get_app_profile_details(app_profile_id, opts = {})
      data, _status_code, _headers = get_app_profile_details_with_http_info(app_profile_id, opts)
      data
    end

    # Returns detail of the app profile
    # Returns detail of the app profile 
    # @param app_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AppProfile, Integer, Hash)>] AppProfile data, response status code and response headers
    def get_app_profile_details_with_http_info(app_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiAppDiscoveryApi.get_app_profile_details ...'
      end
      # verify the required parameter 'app_profile_id' is set
      if @api_client.config.client_side_validation && app_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'app_profile_id' when calling ManagementPlaneApiAppDiscoveryApi.get_app_profile_details"
      end
      # resource path
      local_var_path = '/app-discovery/app-profiles/{app-profile-id}'.sub('{' + 'app-profile-id' + '}', app_profile_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'AppProfile' 

      auth_names = opts[:auth_names] || ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiAppDiscoveryApi#get_app_profile_details\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Returns list of app profile IDs created
    # Returns list of app profile IDs created 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [AppProfileListResult]
    def get_app_profiles(opts = {})
      data, _status_code, _headers = get_app_profiles_with_http_info(opts)
      data
    end

    # Returns list of app profile IDs created
    # Returns list of app profile IDs created 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(AppProfileListResult, Integer, Hash)>] AppProfileListResult data, response status code and response headers
    def get_app_profiles_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiAppDiscoveryApi.get_app_profiles ...'
      end
      # resource path
      local_var_path = '/app-discovery/app-profiles'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'AppProfileListResult' 

      auth_names = opts[:auth_names] || ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiAppDiscoveryApi#get_app_profiles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Export app discovery results in CSV format
    # Returns app discovery results in CSV format, each row contains discovered app information and the id of the vms this app is discovered from for a given set of vms (or for all vms belong to this session when no vm id is passed in) 
    # @param body 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @return [AppInfoHostVmListInCsvFormat]
    def get_appdiscovery_result_app_info_and_host_vm_in_csv_format_csv(body, session_id, opts = {})
      data, _status_code, _headers = get_appdiscovery_result_app_info_and_host_vm_in_csv_format_csv_with_http_info(body, session_id, opts)
      data
    end

    # Export app discovery results in CSV format
    # Returns app discovery results in CSV format, each row contains discovered app information and the id of the vms this app is discovered from for a given set of vms (or for all vms belong to this session when no vm id is passed in) 
    # @param body 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AppInfoHostVmListInCsvFormat, Integer, Hash)>] AppInfoHostVmListInCsvFormat data, response status code and response headers
    def get_appdiscovery_result_app_info_and_host_vm_in_csv_format_csv_with_http_info(body, session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiAppDiscoveryApi.get_appdiscovery_result_app_info_and_host_vm_in_csv_format_csv ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ManagementPlaneApiAppDiscoveryApi.get_appdiscovery_result_app_info_and_host_vm_in_csv_format_csv"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling ManagementPlaneApiAppDiscoveryApi.get_appdiscovery_result_app_info_and_host_vm_in_csv_format_csv"
      end
      # resource path
      local_var_path = '/app-discovery/sessions/{session-id}/report/app-info-and-vm?format=csv'.sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/csv'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'AppInfoHostVmListInCsvFormat' 

      auth_names = opts[:auth_names] || ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiAppDiscoveryApi#get_appdiscovery_result_app_info_and_host_vm_in_csv_format_csv\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Export app profiles in CSV format for a given sessiom
    # Returns app profiles information for a given session in CSV format Each row will contain detailed info of an app profile, and the id of apps which is member of this app profile in this session 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @return [AppProfileMemberAppsListInCsvFormat]
    def get_appdiscovery_session_app_profile_member_apps_in_csv_format_csv(session_id, opts = {})
      data, _status_code, _headers = get_appdiscovery_session_app_profile_member_apps_in_csv_format_csv_with_http_info(session_id, opts)
      data
    end

    # Export app profiles in CSV format for a given sessiom
    # Returns app profiles information for a given session in CSV format Each row will contain detailed info of an app profile, and the id of apps which is member of this app profile in this session 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AppProfileMemberAppsListInCsvFormat, Integer, Hash)>] AppProfileMemberAppsListInCsvFormat data, response status code and response headers
    def get_appdiscovery_session_app_profile_member_apps_in_csv_format_csv_with_http_info(session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiAppDiscoveryApi.get_appdiscovery_session_app_profile_member_apps_in_csv_format_csv ...'
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling ManagementPlaneApiAppDiscoveryApi.get_appdiscovery_session_app_profile_member_apps_in_csv_format_csv"
      end
      # resource path
      local_var_path = '/app-discovery/sessions/{session-id}/report/app-profile-and-app-info?format=csv'.sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/csv'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'AppProfileMemberAppsListInCsvFormat' 

      auth_names = opts[:auth_names] || ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiAppDiscoveryApi#get_appdiscovery_session_app_profile_member_apps_in_csv_format_csv\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Re-classify a completed application discovery session.
    # Re-classify completed application discovery session against input  AppProfiles. If no AppProfiles are specified then we use the previous  AppProfiles of that session. 
    # @param body 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @return [AppDiscoverySessionResultSummary]
    def reclassify_app_discovery_session(body, session_id, opts = {})
      data, _status_code, _headers = reclassify_app_discovery_session_with_http_info(body, session_id, opts)
      data
    end

    # Re-classify a completed application discovery session.
    # Re-classify completed application discovery session against input  AppProfiles. If no AppProfiles are specified then we use the previous  AppProfiles of that session. 
    # @param body 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AppDiscoverySessionResultSummary, Integer, Hash)>] AppDiscoverySessionResultSummary data, response status code and response headers
    def reclassify_app_discovery_session_with_http_info(body, session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiAppDiscoveryApi.reclassify_app_discovery_session ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ManagementPlaneApiAppDiscoveryApi.reclassify_app_discovery_session"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling ManagementPlaneApiAppDiscoveryApi.reclassify_app_discovery_session"
      end
      # resource path
      local_var_path = '/app-discovery/sessions/{session-id}/re-classify'.sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'AppDiscoverySessionResultSummary' 

      auth_names = opts[:auth_names] || ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiAppDiscoveryApi#reclassify_app_discovery_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Starts the discovery of application discovery session
    # Starts the discovery of application discovery session 
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [AppDiscoverySession]
    def start_app_discovery_session(body, opts = {})
      data, _status_code, _headers = start_app_discovery_session_with_http_info(body, opts)
      data
    end

    # Starts the discovery of application discovery session
    # Starts the discovery of application discovery session 
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AppDiscoverySession, Integer, Hash)>] AppDiscoverySession data, response status code and response headers
    def start_app_discovery_session_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiAppDiscoveryApi.start_app_discovery_session ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ManagementPlaneApiAppDiscoveryApi.start_app_discovery_session"
      end
      # resource path
      local_var_path = '/app-discovery/sessions'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'AppDiscoverySession' 

      auth_names = opts[:auth_names] || ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiAppDiscoveryApi#start_app_discovery_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update AppProfile
    # Update AppProfile 
    # @param body 
    # @param app_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [AppProfile]
    def update_app_profile(body, app_profile_id, opts = {})
      data, _status_code, _headers = update_app_profile_with_http_info(body, app_profile_id, opts)
      data
    end

    # Update AppProfile
    # Update AppProfile 
    # @param body 
    # @param app_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AppProfile, Integer, Hash)>] AppProfile data, response status code and response headers
    def update_app_profile_with_http_info(body, app_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiAppDiscoveryApi.update_app_profile ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ManagementPlaneApiAppDiscoveryApi.update_app_profile"
      end
      # verify the required parameter 'app_profile_id' is set
      if @api_client.config.client_side_validation && app_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'app_profile_id' when calling ManagementPlaneApiAppDiscoveryApi.update_app_profile"
      end
      # resource path
      local_var_path = '/app-discovery/app-profiles/{app-profile-id}'.sub('{' + 'app-profile-id' + '}', app_profile_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'AppProfile' 

      auth_names = opts[:auth_names] || ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiAppDiscoveryApi#update_app_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
