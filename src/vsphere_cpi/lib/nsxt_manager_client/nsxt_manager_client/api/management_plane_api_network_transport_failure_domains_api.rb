=begin
#NSX-T Manager API

#VMware NSX-T Manager REST API

OpenAPI spec version: 2.5.1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.25
=end

module NSXT
  class ManagementPlaneApiNetworkTransportFailureDomainsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create Failure Domain
    # Creates a new failure domain. 
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [FailureDomain]
    def create_failure_domain(body, opts = {})
      data, _status_code, _headers = create_failure_domain_with_http_info(body, opts)
      data
    end

    # Create Failure Domain
    # Creates a new failure domain. 
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(FailureDomain, Integer, Hash)>] FailureDomain data, response status code and response headers
    def create_failure_domain_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiNetworkTransportFailureDomainsApi.create_failure_domain ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ManagementPlaneApiNetworkTransportFailureDomainsApi.create_failure_domain"
      end
      # resource path
      local_var_path = '/failure-domains'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'FailureDomain' 

      auth_names = opts[:auth_names] || ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiNetworkTransportFailureDomainsApi#create_failure_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Failure Domain
    # Deletes an existing failure domain. You can not delete system generated default failure domain. 
    # @param failure_domain_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_failure_domain(failure_domain_id, opts = {})
      delete_failure_domain_with_http_info(failure_domain_id, opts)
      nil
    end

    # Delete Failure Domain
    # Deletes an existing failure domain. You can not delete system generated default failure domain. 
    # @param failure_domain_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_failure_domain_with_http_info(failure_domain_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiNetworkTransportFailureDomainsApi.delete_failure_domain ...'
      end
      # verify the required parameter 'failure_domain_id' is set
      if @api_client.config.client_side_validation && failure_domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'failure_domain_id' when calling ManagementPlaneApiNetworkTransportFailureDomainsApi.delete_failure_domain"
      end
      # resource path
      local_var_path = '/failure-domains/{failure-domain-id}'.sub('{' + 'failure-domain-id' + '}', failure_domain_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiNetworkTransportFailureDomainsApi#delete_failure_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a Failure Domain
    # Returns information about a single failure domain.
    # @param failure_domain_id 
    # @param [Hash] opts the optional parameters
    # @return [FailureDomain]
    def get_failure_domain(failure_domain_id, opts = {})
      data, _status_code, _headers = get_failure_domain_with_http_info(failure_domain_id, opts)
      data
    end

    # Get a Failure Domain
    # Returns information about a single failure domain.
    # @param failure_domain_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(FailureDomain, Integer, Hash)>] FailureDomain data, response status code and response headers
    def get_failure_domain_with_http_info(failure_domain_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiNetworkTransportFailureDomainsApi.get_failure_domain ...'
      end
      # verify the required parameter 'failure_domain_id' is set
      if @api_client.config.client_side_validation && failure_domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'failure_domain_id' when calling ManagementPlaneApiNetworkTransportFailureDomainsApi.get_failure_domain"
      end
      # resource path
      local_var_path = '/failure-domains/{failure-domain-id}'.sub('{' + 'failure-domain-id' + '}', failure_domain_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'FailureDomain' 

      auth_names = opts[:auth_names] || ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiNetworkTransportFailureDomainsApi#get_failure_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Failure Domains
    # Returns information about configured failure domains.
    # @param [Hash] opts the optional parameters
    # @return [FailureDomainListResult]
    def list_failure_domains(opts = {})
      data, _status_code, _headers = list_failure_domains_with_http_info(opts)
      data
    end

    # List Failure Domains
    # Returns information about configured failure domains.
    # @param [Hash] opts the optional parameters
    # @return [Array<(FailureDomainListResult, Integer, Hash)>] FailureDomainListResult data, response status code and response headers
    def list_failure_domains_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiNetworkTransportFailureDomainsApi.list_failure_domains ...'
      end
      # resource path
      local_var_path = '/failure-domains'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'FailureDomainListResult' 

      auth_names = opts[:auth_names] || ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiNetworkTransportFailureDomainsApi#list_failure_domains\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update Failure Domain
    # Updates an existing failure domain. Modifiable parameters are display_name, preferred_active_edge_services flag. 
    # @param body 
    # @param failure_domain_id 
    # @param [Hash] opts the optional parameters
    # @return [FailureDomain]
    def update_failure_domain(body, failure_domain_id, opts = {})
      data, _status_code, _headers = update_failure_domain_with_http_info(body, failure_domain_id, opts)
      data
    end

    # Update Failure Domain
    # Updates an existing failure domain. Modifiable parameters are display_name, preferred_active_edge_services flag. 
    # @param body 
    # @param failure_domain_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(FailureDomain, Integer, Hash)>] FailureDomain data, response status code and response headers
    def update_failure_domain_with_http_info(body, failure_domain_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiNetworkTransportFailureDomainsApi.update_failure_domain ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ManagementPlaneApiNetworkTransportFailureDomainsApi.update_failure_domain"
      end
      # verify the required parameter 'failure_domain_id' is set
      if @api_client.config.client_side_validation && failure_domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'failure_domain_id' when calling ManagementPlaneApiNetworkTransportFailureDomainsApi.update_failure_domain"
      end
      # resource path
      local_var_path = '/failure-domains/{failure-domain-id}'.sub('{' + 'failure-domain-id' + '}', failure_domain_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'FailureDomain' 

      auth_names = opts[:auth_names] || ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiNetworkTransportFailureDomainsApi#update_failure_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
