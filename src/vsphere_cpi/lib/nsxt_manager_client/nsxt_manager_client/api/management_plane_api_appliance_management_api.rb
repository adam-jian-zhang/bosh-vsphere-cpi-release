=begin
#NSX-T Manager API

#VMware NSX-T Manager REST API

OpenAPI spec version: 2.5.1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.25
=end

module NSXT
  class ManagementPlaneApiApplianceManagementApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # List available node logs
    # Returns the number of log files and lists the log files that reside on the NSX virtual appliance. The list includes the filename, file size, and last-modified time in milliseconds since epoch (1 January 1970) for each log file. Knowing the last-modified time with millisecond accuracy since epoch is helpful when you are comparing two times, such as the time of a POST request and the end time on a server. 
    # @param [Hash] opts the optional parameters
    # @return [NodeLogPropertiesListResult]
    def list_node_logs(opts = {})
      data, _status_code, _headers = list_node_logs_with_http_info(opts)
      data
    end

    # List available node logs
    # Returns the number of log files and lists the log files that reside on the NSX virtual appliance. The list includes the filename, file size, and last-modified time in milliseconds since epoch (1 January 1970) for each log file. Knowing the last-modified time with millisecond accuracy since epoch is helpful when you are comparing two times, such as the time of a POST request and the end time on a server. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(NodeLogPropertiesListResult, Integer, Hash)>] NodeLogPropertiesListResult data, response status code and response headers
    def list_node_logs_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiApplianceManagementApi.list_node_logs ...'
      end
      # resource path
      local_var_path = '/node/logs'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'NodeLogPropertiesListResult' 

      auth_names = opts[:auth_names] || ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiApplianceManagementApi#list_node_logs\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read node log properties
    # For a single specified log file, lists the filename, file size, and last-modified time. 
    # @param log_name Name of log file to read properties
    # @param [Hash] opts the optional parameters
    # @return [NodeLogProperties]
    def read_node_log(log_name, opts = {})
      data, _status_code, _headers = read_node_log_with_http_info(log_name, opts)
      data
    end

    # Read node log properties
    # For a single specified log file, lists the filename, file size, and last-modified time. 
    # @param log_name Name of log file to read properties
    # @param [Hash] opts the optional parameters
    # @return [Array<(NodeLogProperties, Integer, Hash)>] NodeLogProperties data, response status code and response headers
    def read_node_log_with_http_info(log_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiApplianceManagementApi.read_node_log ...'
      end
      # verify the required parameter 'log_name' is set
      if @api_client.config.client_side_validation && log_name.nil?
        fail ArgumentError, "Missing the required parameter 'log_name' when calling ManagementPlaneApiApplianceManagementApi.read_node_log"
      end
      # resource path
      local_var_path = '/node/logs/{log-name}'.sub('{' + 'log-name' + '}', log_name.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/octet-stream'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'NodeLogProperties' 

      auth_names = opts[:auth_names] || ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiApplianceManagementApi#read_node_log\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read node log contents
    # For a single specified log file, returns the content of the log file. This method supports byte-range requests. To request just a portion of a log file, supply an HTTP Range header, e.g. \"Range: bytes=<start>-<end>\". <end> is optional, and, if omitted, the file contents from start to the end of the file are returned.' 
    # @param log_name Name of log to read
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def read_node_log_data(log_name, opts = {})
      read_node_log_data_with_http_info(log_name, opts)
      nil
    end

    # Read node log contents
    # For a single specified log file, returns the content of the log file. This method supports byte-range requests. To request just a portion of a log file, supply an HTTP Range header, e.g. \&quot;Range: bytes&#x3D;&lt;start&gt;-&lt;end&gt;\&quot;. &lt;end&gt; is optional, and, if omitted, the file contents from start to the end of the file are returned.&#x27; 
    # @param log_name Name of log to read
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def read_node_log_data_with_http_info(log_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiApplianceManagementApi.read_node_log_data ...'
      end
      # verify the required parameter 'log_name' is set
      if @api_client.config.client_side_validation && log_name.nil?
        fail ArgumentError, "Missing the required parameter 'log_name' when calling ManagementPlaneApiApplianceManagementApi.read_node_log_data"
      end
      # resource path
      local_var_path = '/node/logs/{log-name}/data'.sub('{' + 'log-name' + '}', log_name.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/octet-stream'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiApplianceManagementApi#read_node_log_data\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
